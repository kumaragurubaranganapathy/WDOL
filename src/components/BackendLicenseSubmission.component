<!--**
* User Story: 124- Submission List Triggers
* Name: BackendLicenseSubmission
* Type: Visual Force Component
* Description: Used in BackendLicneseSubmission Visual Force Page
* Date:        Developer/Company                 	Description
* ---------------------------------------------------------------------------------------------------------------------------------------- *
* 06/28/2018   Sharad Maheshwari/Deloitte           Initial Creation
**-->
<apex:component controller="BackendLicenseSubmission_CC" allowDML="true">
<apex:attribute name="licenseId" assignTo="{!pid}" type="Id" description="Attribute to pass Id of license record"/>
<apex:attribute name="permitId" assignTo="{!permitpid}" type="Id" description="Attribute to pass Id of license record"/>
<apex:attribute name="permitFlag" assignTo="{!isPermit}" type="Boolean" description="Attribute to receive id of components that needs to be rerendered"/>
<apex:attribute name="licenseFlag" assignTo="{!isLicense}" type="Boolean" description="Attribute to receive id of components that needs to be rerendered"/>
<apex:attribute name="licenseReinstatementFlag" assignTo="{!isLicenseReinstatement}" type="Boolean" description="Attribute to receive id of components that needs to be rerendered"/>    
<apex:attribute name="reinstatementFlag" assignTo="{!isReinstatement}" type="Boolean" description="Attribute to receive id of components that needs to be rerendered"/>
<apex:attribute name="renewalFlag" assignTo="{!isRenewal}" type="Boolean" description="Attribute to receive id of components that needs to be rerendered"/>
<apex:attribute name="renewalPTOFlag" assignTo="{!isRenewalPTO}" type="Boolean" description="Attribute to receive id of components that needs to be rerendered"/>
<apex:attribute name="srFlag" assignTo="{!isSR}" type="Boolean" description="Attribute to receive id of components that needs to be rerendered"/>
<apex:attribute name="verificationFlag" assignTo="{!isVerification}" type="Boolean" description="Attribute to receive flag to deicide if component is used for verification"/>
<apex:attribute name="reviewFlag" assignTo="{!isReview}" type="Boolean" description="Attribute to receive id of components that needs to be rerendered"/>
<apex:attribute name="complaintFlag" assignTo="{!isComplaint}" type="Boolean" description="Attribute to denote to pull submissions under Complaint"/>
<apex:attribute name="ExamCreditFlag" assignTo="{!isExamCredit}" type="Boolean" description="Attribute to denote to pull submissions under Exam Credit"/>
<apex:stylesheet value="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css"/>
<apex:stylesheet value="{!URLFOR($Resource.DragnDrop,'style.css')}"/>
    <!-- Needs to be moved to static resource later -->
    <style>
        hr.separator{
            height:12px;
            border: 0;
            box-shadow: inset 0 12px 12px -12px rgba(0, 0, 0, 0.5);
        }
        div.content-wrapper{
            border:1px solid grey;
            -webkit-box-shadow: 0px 0px 25px 1px rgba(0,0,0,0.75);
            -moz-box-shadow: 0px 0px 25px 1px rgba(0,0,0,0.75);
            box-shadow: 0px 0px 25px 1px rgba(0,0,0,0.75);
            background-color: #f1f1f1;
            padding-bottom:30px;
        }
        .rounded{
            border:1px solid grey;
            -moz-border-radius: 10px;
            -webkit-border-radius: 10px;
            border-radius: 10px; /* future proofing */
        }
        .upload-message, #submission-name{
            color:green;
            font-size:15px;
        }
        #submission-name{
            font-weight:bold;
        }
        .inputFile{
            font-size:14px;
            color:black;
        }
        .delete-icon{
            color:red;
            font-size:1em;
        }
        .delete-btn{
            color:red;
            font-size:1.5em;
        }
        .disabled-icon{
            font-size:1.2em;
        }
        .show-complete{
            background-image: url("/img/msg_icons/confirm24.png");
            background-repeat:no-repeat;
            display:block;
            width:28px !important;
            height:28px !important;
        }
        .btn-wrapper{
            min-width: 255px;
        }
        .form-group{
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }
        .form-group input, .form-group textarea, .form-group select, .form-group span.form-control{ 
            width: 300px;
        }
        .messageText {
          color: green;
          font-weight: bold;
        }
        .required-input{
              border-left: 3px solid red;
        }
        /*screen-xs*/
        @media (max-width: 768px) { 
          .btn-wrapper{
             text-align:center;
          }
        }
        @media (min-width: 995px) {
            .inputFile{
                padding-left:11%;
            }
        }
        .btn-primary {
        color: #fff;
        background-color: #337ab7;
        border-color: #2e6da4;
        margin-top: 5px;
        }        
    </style>
    <!--Todo-->
     <!--c:Notification_Replacement id="notificationComponent" /-->
            <script>
        $( document ).ready(function() {
            parent.generateNotification();
        });
        </script>
    <div class="outer-wrapper">
        <div class="container-fluid content-wrapper">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-xs-4">
                        <apex:outputPanel rendered="{!$ObjectType.MUSW__Submission__c.updateable}">
                            <button type="button" class="btn btn-primary btn-lg" id="createBtn" onclick="clearModel();event.preventDefault();" data-toggle="modal" data-target="#createSubmission">Create New Submission</button>
                        </apex:outputPanel>
                    </div>
                    <div style="display: none">
                        <apex:pageMessages id="message"/>
                    </div>
                </div>
                <apex:form enctype="multipart/form-data" title="from" id="form">
                    <apex:actionFunction action="{!refreshSubmissions}" name="refreshSubmissions">
                    </apex:actionFunction>
                    <apex:inputHidden value="{!subId}" id="subId"/>
                    <apex:inputHidden value="{!hiddenSubId}" id="hiddenSubId"/>
                    <apex:pagemessages ></apex:pagemessages>
                    <div class="row">
                        <apex:dataTable value="{!submissionList}" var="submission" id="submissionsTable" styleClass="table table-striped table-responsive table-hover rounded col-xs-12">
                            <apex:column >
                                <apex:facet name="header">Actions</apex:facet>
                                <!--btn-wrapper-->
                                <apex:outputPanel styleClass="" rendered="{!$ObjectType.MUSW__Submission__c.updateable}" layout="block" >
                                    <apex:outputPanel rendered="{!IF((submission.Status__c != 'Accepted' && NOT(submission.Is_Backend_Submission__c)), 'TRUE', 'FALSE')}">
                                        <button onclick="setStatus('{!submission.Id}','Accepted');event.preventDefault();" class="btn btn-primary Actions">Accept</button>
                                    </apex:outputPanel>
                                    <apex:outputPanel rendered="{!IF((submission.Status__c != 'Additional Info. Required' && NOT(submission.Is_Backend_Submission__c)), 'TRUE', 'FALSE')}">
                                        <button onclick="setStatus('{!submission.Id}','Additional Info. Required');event.preventDefault();" class="btn btn-primary Actions">Reject</button>
                                    </apex:outputPanel>
                                    <apex:outputPanel rendered="{!NOT(submission.Master_Submission_List__r.Hide_Upload_button_in_backend__c)}">
                                        <button onclick='showUpload("{!submission.Id}","{!submission.name}");event.preventDefault();' class="btn btn-primary Actions uploadAction">Upload</button>
                                     </apex:outputPanel>
                                    <apex:outputPanel rendered="{!submission.Master_Submission_List__r.Hide_Upload_button_in_backend__c}">
                                        <button onclick='setHardCopy("{!submission.Id}","{!submission.name}");event.preventDefault();' class="btn btn-primary Actions">Acknowledge</button>
                                    </apex:outputPanel>
                                    <apex:outputPanel rendered="{!submission.Is_Backend_Submission__c}">
                                        <button onclick="retrieveSubmission('{!submission.Id}');event.preventDefault();" class="btn btn-primary Actions">Edit</button>
                                        <button onclick="setRemovalId('{!submission.Id}');event.preventDefault();" class="btn btn-primary Actions">Delete</button>
                                    </apex:outputPanel>


                                </apex:outputPanel>
                            </apex:column>
                            <apex:column >
                                <apex:facet name="header">Title</apex:facet>
                                <apex:outputText value="{!submission.name}"/>
                            </apex:column>
                            <apex:column >
                                <apex:facet name="header">Description</apex:facet>
                                <apex:outputText escape="false" value="{!submission.Description_Long__c}" style="max-width:300px;"/>
                            </apex:column>
                            <apex:column >
                                <apex:facet name="header">Submission Time</apex:facet>
                                <apex:outputField value="{!submission.MUSW__Submission_DateTime__c}"/>
                            </apex:column>
                            <apex:column >
                                <apex:facet name="header">Acknowledge</apex:facet>
                                <span id="{!submission.Id}-hardcopy">
                                    <apex:outputField value="{!submission.Hardcopy__c}"/>
                                </span>
                            </apex:column>
                            <apex:column >
                                <apex:facet name="header">Visibility</apex:facet>
                                {!IF(submission.Is_Backend_Submission__c,IF(submission.Available_to_public__c,'Public','Backend'),'Portal')}
                            </apex:column>
                            <apex:column >
                                <!--html-nowrap="nowrap" Removed from above column to prevent overflow --> 
                                <apex:facet name="header">Uploads</apex:facet>
                                <apex:outputpanel rendered="{!submission.Hardcopy__c}">
                                    Please send hard copy of your documents<br/>
                                </apex:outputpanel>
                                <!-- rendered="{!NOT(submission.Hardcopy__c)}"-->
                                <apex:outputPanel rendered="{!$ObjectType.MUSW__Submission__c.updateable}" >
                                    <apex:outputPanel rendered="{!NOT(ISBLANK(submission.MUSW__Link__c))}">
                                        <button onclick="event.preventDefault();" disabled="true">
                                                    <span class="glyphicon glyphicon-trash disabled-icon" title="Delete"></span>
                                                </button>&nbsp;
                                        <a href="{!submission.MUSW__Link__c}" target="_blank">{!submission.MUSW__Link__c}</a><br/>
                                    </apex:outputPanel>
                                    <span id="{!submission.Id}-uploads">
                                        <apex:repeat value="{!submission.Attachments}" var="att">
                                            <a href="/servlet/servlet.FileDownload?file={!att.Id}" target="_blank" title="{!att.Name}">{!LEFT(att.Name, 10)}</a>
                                            <button onclick="customConfirmOnDeleteAttachment('{!submission.Id}','{!att.Id}');event.preventDefault();">
                                                <span class="glyphicon glyphicon-trash delete-icon" title="Delete"></span>
                                                <!--<img src="/img/func_icons/remove12_on.gif" alt="Delete Attachment" width="10px" height="10px;"/>-->
                                            </button>&nbsp;
                                            <br/>
                                        </apex:repeat>
                                    </span>
                                </apex:outputPanel>
                            </apex:column>
                            <apex:column >
                                <apex:facet name="header">Status</apex:facet>
                                <span id="{!submission.Id}-acceptStatus">
                                    <apex:outputText value="{!submission.Status__c}"/>
                                </span>
                            </apex:column>
                            <apex:column >
                                <apex:facet name="header">Complete</apex:facet>
                                <span id="{!submission.Id}-status">
                                    <apex:outputPanel styleClass="show-complete" rendered="{!OR(submission.Attachments.size >0,submission.Hardcopy__c)}">
                                    </apex:outputPanel>
                                </span>
                            </apex:column>
                        </apex:dataTable>
                        <span id="message-panel" style="display:none;">
                            <div class="upload-message text-center"> Please upload supporting documents in below section for submission - <span id="submission-name"/></div>
                            <br/>
                            <!-- HTML to show drop box and thumbnail images-->
                            <div id="drop_zone">
                                Drop files here
                                <br/>
                                OR
                                <br/>
                                <div class="inputFile text-center col-xs-2 col-xs-offset-4">
                                    <apex:inputFile contentType="{!file.ContentType}" value="{!file.body}" fileName="{!file.Name}"/>
                                </div>
                                <br/>
                                <div class="col-xs-2 col-xs-offset-5">
                                    <apex:commandButton rendered="{!$ObjectType.MUSW__Submission__c.updateable}" value="Upload" styleClass="btn btn-primary" action="{!uploadFile}"/>
                                </div>
                                <br/>
                            </div>
                            <div id="list"></div>
                        </span>
                    </div>
                    <div class="row" style="display:none;">
                        <div class="text-center">
                                <apex:commandButton value="All Documents Uploaded" id="button" disabled="{!NOT(enableDoneButton)}" styleClass="btn btn-success"/>
                        </div>
                    </div> 
    <apex:outputPanel >
    <div class="modal fade" id="createSubmission" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true" style="color:red;">&times;</span></button>
            <h4 class="modal-title" id="myModalLabel">Please enter new submission details</h4>
          </div>
          <div class="modal-body">
              <div class="form-group  has-error">
                <label for="contact-fname" class="control-label">Title:</label>
                <apex:inputField id="submissionTitle" value="{!newSubmission.Name}" styleClass="form-control required-input"/>
              </div>
              <div class="form-group">
                <label for="contact-lname" class="control-label">Description:</label>
                <apex:inputField id="submissionDesc" value="{!newSubmission.Description_Long__c}" styleClass="form-control"/>
              </div>
              <div class="form-group">
                <label for="contact-email" class="control-label">Link:</label>
                <apex:inputField id="submissionLink" value="{!newSubmission.MUSW__Link__c}"  styleClass="form-control"/>
              </div>
              <div class="form-group">
                <label for="contact-rfid" class="control-label">Available to Public:</label>
                <apex:inputField id="submissionPublic" value="{!newSubmission.Available_to_public__c}" styleClass="form-control"/>
              </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
            <!-- <button type="button" onclick="createContact();" class="btn btn-success">Create Submission</button> -->
            <apex:commandButton value="Save" action="{!createSubmission}" styleClass="btn btn-success"/>
          </div>
        </div>
      </div>
    </div>
    </apex:outputPanel>
                </apex:form>
            </div>
        </div>
    </div>
    <style>
    .table {
        table-layout: fixed;
        word-wrap: break-word;
        }
        .Actions { 
  width: 100%;
}
    </style>
    <apex:includeScript value="https://code.jquery.com/jquery-1.11.3.min.js"/>
    <apex:includeScript value="../../soap/ajax/33.0/connection.js" />
    <apex:includeScript value="{!URLFOR($Resource.DragnDrop,'script.js')}"/>
    <apex:includeScript value="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"/>
    <script type="text/javascript">
        
        //On page load execution. 
        //Declaration of variables.
        var attachment;
        var attachmentName;
        var fileType;
        var parentId = '';  
            
        //Binding div with id "drop_zone" to events
        //For details of method, refer static resource
        bindDragEvents();

        //Method to show upload section and set parentId value
        function showUpload(submissionId,submissionName){          
            parentId = submissionId;
            document.getElementById("{!$Component.form:subId}").value = submissionId;
            $("#submission-name").html(submissionName);
            $("#message-panel").show();
            //$("html, body").animate({ scrollTop: $("#message-panel").offset().top }, 1000);
        }
       $(".uploadAction").on("click",function(event){
             event.preventDefault();
             $('html, body').animate({
                scrollTop: $("#drop_zone").offset().top
            }, 400);
        });

        //Method to set submission Id to hidden input field and delete submission
        function setRemovalId(submissionId){
            document.getElementById("{!$Component.form:hiddenSubId}").value = submissionId;
            refreshSubmissions();
        }
        
        //JS Remoted method to denote that user is sending hard copy of the docs
        function setHardCopy(submissionId,submissionName){
             Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.BackendLicenseSubmission_CC.updateHardCopy}',
                submissionId, 
                function(result, event){
                    if (event.status) {
                        if(result == 'success'){
                            $("#"+submissionId+'-hardcopy').html('<img src="/img/checkbox_checked.gif" class="checkImg">');
                            $("#"+submissionId+'-uploads').html('Please send hard copy of your documents');
                            //Should be avoided ideally. May need to be changed, if markup is changed.
                            $("#"+submissionId+'-hardcopy').parent().parent().addClass('success');
                            $("#"+submissionId+'-status').html('<span class="show-complete"/>');
                        }else{
                            alert('Error occurred - '+result);
                        }
                    } else if (event.type === 'exception') {
                        alert('Unexpected Error occurred - '+event.message);
                    } else {
                        alert('Unexpected Error occurred - '+event.message);
                        window.top.location.reload();
                    }
                }, 
                {escape: true}
            );
        }

        //JS Remoted method to denote that user is sending hard copy of the docs
        function setStatus(submissionId,status){
             Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.BackendLicenseSubmission_CC.updateStatus}',
                submissionId, status,
                function(result, event){
                    if (event.status) {
                        if(result == 'success'){
                            $("#"+submissionId+'-acceptStatus').html(status);
                        }else{
                            alert('Error occurred - '+result);
                        }
                    } else if (event.type === 'exception') {
                        alert('Unexpected Error occurred - '+event.message);
                    } else {
                        alert('Unexpected Error occurred - '+event.message);
                        window.top.location.reload();
                    }
                }, 
                {escape: true}
            );
        }

        //JS Remoted method to get submission record details
        function retrieveSubmission(submissionId){
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.BackendLicenseSubmission_CC.getSubmissionDetails}',
                submissionId,
                function(result, event){
                    if (event.status) {
                        if(result != null && result != undefined){
                            $("#createBtn").trigger('click');
                            document.getElementById("{!$Component.form:hiddenSubId}").value = submissionId;
                            document.getElementById("{!$Component.form:submissionTitle}").value = result.Name;
                            document.getElementById("{!$Component.form:submissionDesc}").value = ((result.Description_Long__c != null && result.Description_Long__c != undefined)?result.Description_Long__c:'');
                            document.getElementById("{!$Component.form:submissionLink}").value = ((result.MUSW__Link__c != null && result.MUSW__Link__c != undefined)?result.MUSW__Link__c:'');
                            document.getElementById("{!$Component.form:submissionPublic}").checked = result.Available_to_public__c;
                        }else{
                            alert('Error occurred - '+result);
                        }
                    } else if (event.type === 'exception') {
                        alert('Unexpected Error occurred - '+event.message);
                    } else {
                        alert('Unexpected Error occurred - '+event.message);
                        window.top.location.reload();
                    }
                }, 
                {escape: true}
            );
        }

        //Function to clear model values
        function clearModel(){
            document.getElementById("{!$Component.form:hiddenSubId}").value = '';
            document.getElementById("{!$Component.form:submissionTitle}").value = '';
            document.getElementById("{!$Component.form:submissionDesc}").value = '';
            document.getElementById("{!$Component.form:submissionLink}").value = '';
            document.getElementById("{!$Component.form:submissionPublic}").checked = false;
            document.getElementById("{!$Component.form:submissionLink}").setAttribute('type','url');
        }
        
        function customConfirmOnDeleteAttachment(submissionId,attId){
                var r = confirm("Are you sure you want to delete this attachment?");
                if (r == true) {
                   deleteAttachment(submissionId,attId);
                } else {
                   x = "You pressed Cancel!";
                }

        }
        //JS Remoted method to delete attachment
        function deleteAttachment(submissionId,attId){
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.BackendLicenseSubmission_CC.deleteAttachment}',
                attId, 
                function(result, event){
                    if (event.status) {
                        if(result == 'success'){
                            alert('File is deleted from server');
                            refreshAttachments(submissionId);
                        }else{
                            alert('Error occurred - '+result);
                        }
                    } else if (event.type === 'exception') {
                        alert('Unexpected Error occurred - '+event.message);
                    } else {
                        alert('Unexpected Error occurred - '+event.message);
                        window.top.location.reload();
                    }
                }, 
                {escape: true}
            );
        }
        
        //JS Remoted method to delete attachment
        function setButtonStatus(){
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.BackendLicenseSubmission_CC.getCompletionStatus}',
                 '{!pid}','{!isRenewal}','{!isRenewalPTO}','{!isSR}','{!isReinstatement}','{!isLicense}','{!isPermit}','{!isReview}', '{!isComplaint}', '{!isExamCredit}',
                function(result, event){
                    if (event.status) {
                        if(result){
                            //$("#page:form:button").removeAttr("disabled");
                            document.getElementById("{!$Component.form:button}").removeAttribute("disabled");
                        }else{
                            document.getElementById("{!$Component.form:button}").setAttribute("disabled", "disabled");
                        }
                    } else if (event.type === 'exception') {
                        alert('Unexpected Error occurred - '+event.message);
                    } else {
                        alert('Unexpected Error occurred - '+event.message);
                        window.top.location.reload();
                    }
                }, 
                {escape: true}
            );
        }
        
        //Method to refresh the list of attachments and update completion status
        function refreshAttachments(submissionId){
            setButtonStatus();
             Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.BackendLicenseSubmission_CC.getAttachmentList}',
                submissionId, 
                function(result, event){
                    if (event.status) {
                        if(result){
                            var fileList = '';
                            $.each(result, function(i,attach) {
                                fileList = fileList+'<button onclick="customConfirmOnDeleteAttachment(\''+submissionId+'\',\''+attach.Id+'\');event.preventDefault();">'+
                                                         '<span class="glyphicon glyphicon-trash delete-icon" title="Delete"></span>'+
                                                    '</button>&nbsp;'+
                                                    '<a href="/servlet/servlet.FileDownload?file='+attach.Id+'" target="_blank">'+attach.Name+'</a><br/>';
                            });
                            $("#"+submissionId+'-uploads').html(fileList);
                            if(result == null || result == undefined || result.length ==0){
                                $("#"+submissionId+'-status').html('');
                                setStatus(submissionId,null);
                            }else{
                                $("#"+submissionId+'-status').html('<span class="show-complete"/>');
                            }
                        }else{
                            alert('Error occurred - '+result);
                        }
                    } else if (event.type === 'exception') {
                        alert('Unexpected Error occurred - '+event.message);
                    } else {
                        alert('Unexpected Error occurred - '+event.message);
                        window.top.location.reload();
                    }
                }, 
                {escape: true}
            );
        }
        
        //Method to handle file drop event
        function handleFileSelect(evt) {
            evt.stopPropagation();
            evt.preventDefault();
            handleDragOut();
            if(parentId != null && (parentId.length ==15 || parentId.length == 18)){
                // Retrieves all files
                var files = evt.dataTransfer.files; 
                //Iterating over the files.
                for (var i = 0, f; f = files[i]; i++) {
                    var reader = new FileReader();
    
                    // Closure to capture the file information.
                    reader.onload = (function(theFile) {
                        return function(e) {
                            // Render thumbnail.
                            attachmentName = theFile.name;
                            fileType = theFile.type;
                            var span = document.createElement('span');
                            //Attaches thumbnails for image files and divs with predefined styles for other types.                        
                            var droppedHTML = getThumbnail(theFile.type,e);                        
                            span.innerHTML=droppedHTML;
                            document.getElementById('list').insertBefore(span, null);
                        };
                    })(f);
                          
                    //Once file is loaded, 
                    reader.onloadend = function(e) {
                        attachment = this.result.split(',')[1];
                        if(e.total <= 25000000){
                            uploadDocument(attachment,fileType,attachmentName,'{!$Api.Session_ID}');      
                        }
                        else{
                            alert('This file exceeds maximum attachment size - 25MB. It cannot be attached');
                        }
                    }
                    // Read in the file as a data URL.
                    reader.readAsDataURL(f);
                }
            }
            else{
                alert("Please open the detail page of any record and try again.");
            }
        }
        
        //Method to upload document using ajax toolkit api call
        function uploadDocument(fileBody,attType,attName,sessionId) { 
            sforce.connection.sessionId = sessionId;
            var attach         = new sforce.SObject('Attachment');
            attach.Name        = attName;
            attach.IsPrivate   = false;
            attach.ContentType = attType;
            attach.Body        = fileBody;
            attach.Description = attName;
            attach.ParentId    = parentId;
            //Making create call using AJAX toolkit assynchronously.
            sforce.connection.create([attach],{onSuccess : success, onFailure : failed});
         
            //Callback method for successful execution
            function success(result) {
              if (result[0].getBoolean("success")) {
                //alert("Document is successfully attached with ID " + result[0].id);
                refreshAttachments(parentId);
                var submissionUpdate = new  sforce.SObject('MUSW__Submission__c');
                submissionUpdate.Id=parentId;
                submissionUpdate.MUSW__Submission_DateTime__c= new Date();
                sforce.connection.update([submissionUpdate]);
              } else {
                alert("Failed to Create Attachment -" + result[0]);
              }
              showStatus();
            }
           
            //Callback method for error in successful execution
            function failed(error) {
               alert("An unexpected error has occurred " + error);
               showStatus();
            }
        }

        $( document ).ready(function() {
            document.getElementById("{!$Component.form:submissionLink}").setAttribute('type','url');
        });

    </script>
</apex:component>