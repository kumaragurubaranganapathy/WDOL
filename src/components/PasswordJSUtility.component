<!--*************************************************************************************************************
**************************************************************************************************************
** Name             : PasswordJSUtility
** Description      : Password validation rules defined
** Version          : 1.0
** Built By         : 
**------------------------------------------------------------------------------------------------------------------------
** Modification Log:
**--------------------------
** Developer                    Date                    Version             Description
**------------------------------------------------------------------------------------------------------------------------
**
**																			
** Review Log:
**---------------
** Reviewer                     Date                    Version             Description
**------------------------------------------------------------------------------------------------------------------------
**
*************************************************************************************************************-->
<apex:component >
    <style>
        #passwordStrengthPlaceHolder{
        padding-top:10px ;
        padding-bottom:15px;
        }
        .glyphicon-check{
        color: limegreen;
        cursor:default;
        }
        .glyphicon-unchecked{
        color : #ff8768;
        cursor:default;
        }
        .glyphicon-defualt{
        color: grey;
        cursor:default;
        }
        
        .slightLeft{
        margin-left:10px !important;
        }
    </style>
    <script type="text/javascript">
    
    var TestCase = function(obj){
        this._regex = obj.regex || null
        this._caseType = obj.type;
        this._id = obj.field;
        this.element = obj.container
        ? obj.container.find("[id$=" + this._id + "]")
        : $("[id$=" + this._id + "]")
        this.isValid = false;
        this.isCustom = false;
        this._customTestCase = null;
        
        if(obj.customTestCase && typeof obj.customTestCase === 'function'){
            this.isCustom = true;
            this._customTestCase = obj.customTestCase
        }
        
        this._applyStyle = function(){
            this.element.removeClass();
            this.isValid
            ? this.element.addClass("glyphicon glyphicon-check")
            : this.element.addClass("glyphicon glyphicon-unchecked")
        }
        
        this.setCriteria = function(password){
            //run the case and set the validity; do someother styling stuff
            if(this._caseType == 'length'){
                this.isValid = password.length >= this._regex
            } else if(this._caseType == 'regex'){
                this.isValid = this._regex.test(password)
            } else if(this._caseType == 'custom'){
                this.isValid = this._customTestCase(this.isValid, password);
            }
            
            this._applyStyle();
            return this.isValid;
        }
        
        this.resetCriteria = function(){
            this.isValid = false;
            this.element.removeClass();
            this.element.addClass("glyphicon glyphicon-unchecked");
        }
    }
    
    var PasswordManager = function(obj){
        this._defaultHtml = "<div class=\"col-sm-12\" style=\"margin-top:10px;\">\nPassword must contain:\n<div class=\"row slightLeft\">\n<label><span id=\"morethan10\" class=\"glyphicon glyphicon-unchecked glyphicon-defualt\"></span>More than 10 Characters</label>\n</div>\n<div class=\"row slightLeft\">\n<label><span id=\"uppercase\" class=\"glyphicon glyphicon-unchecked glyphicon-defualt\"></span>1 Uppercase Letter</label>\n</div>\n<div class=\"row slightLeft\">\n<label><span id=\"lowercase\" class=\"glyphicon glyphicon-unchecked glyphicon-defualt\"></span>1 Lowercase Letter</label>\n</div>\n<div class=\"row slightLeft\">\n<label><span id=\"onenumber\" class=\"glyphicon glyphicon-unchecked glyphicon-defualt\"></span>1 Number</label>\n</div>\n<div class=\"row slightLeft\">\n<label><span id=\"speccharacter\" class=\"glyphicon glyphicon-unchecked glyphicon-defualt\"></span>1 Special Character (e.g. $%^@#)</label>\n</div>\nPassword must not contain:\n<div class=\"row slightLeft\">\n<label><span id=\"firstlast\" class=\"glyphicon glyphicon-unchecked glyphicon-defualt\"></span>User's First and/or Last Name</label>\n</div>\n</div>";
        
        
        //Region Test Cases
        this._passwordTestCaseMap = {};
        
        this._passwordTestCaseMap.symbol = {
            regex: /[-!@#$%^&*()_+|~=`{}\[\]:";'<>?,.\/]/,
            type : 'regex',
            field : 'speccharacter'
            
        };
        this._passwordTestCaseMap.upperCase = {
            regex :   /[A-Z]/,
            type: 'regex',
            field : 'uppercase'
        };
        this._passwordTestCaseMap.lowerCase = {
            regex : /[a-z]/,
            type : 'regex',
            field : 'lowercase'
        };
        this._passwordTestCaseMap.number = {
            regex : /[0-9]/,
            type : 'regex',
            field : 'onenumber'
        };
        this._passwordTestCaseMap.length = {
            regex : 10,
            type : 'length',
            field : 'morethan10'
        }
        
        if(obj.customTestCases){
            for(var i = 0 ; i < obj.customTestCases.length ; i++){
                this._passwordTestCaseMap[obj.customTestCases[i].caseName] = obj.customTestCases[i];
            }
        }
        // End Region
        
        this._testCases = [];
        this._container = obj.container || null;
        this._specificationHtml = obj.specificationHtml || this._defaultHtml;
        
        if(this._container){
            this._container.append(this._specificationHtml);
        }
        
        this._isCriteria = false;
        this.isValidCritera = function(string){
            this.setCriteria(string);
            return this._testCases.map(function(e){return e.isValid}).indexOf(false) <= -1
        }
        
        this.setCriteria = function(string){
            for(var i = 0 ; i < this._testCases.length ; i++ ){
                this._testCases[i].setCriteria(string);
            }
        }
        
        this.resetCriteria = function(string){
            for(var i = 0 ; i < this._testCases.length ; i++ ){
                this._testCases[i].resetCriteria()
            }
        }
        
        this._buildTestCases = function(){
            this._testCases = [];
            var keys = Object.keys(this._passwordTestCaseMap);
            for(var i = 0 ; i < keys.length ; i++){
                this._passwordTestCaseMap[keys[i]]['container'] = this._container || null;
                this._testCases.push(new TestCase(this._passwordTestCaseMap[keys[i]]));
            }
        }
        
        this._buildTestCases();
    }
    
    
    </script>
</apex:component>