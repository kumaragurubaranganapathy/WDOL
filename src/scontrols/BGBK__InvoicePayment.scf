<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
	<head>
		<title>{!HTMLENCODE(BGBK__Bill__c.Name)}{!HTMLENCODE(MUSW__Permit__c.Name)}{!HTMLENCODE(MUSW__Complaint__c.Id)}{!HTMLENCODE(MUSW__Planning_Application__c.Name)}{!HTMLENCODE(MUSW__License1__c.Name)}{!HTMLENCODE(MUSW__Permit2__c.Name)}{!HTMLENCODE(MUSW__Complaint2__c.Id)}{!HTMLENCODE(MUSW__Application2__c.Name)}{!HTMLENCODE(MUSW__License2__c.Name)}: Pay Fees</title>
		<link href="/sCSS/8.0/1171411121000/Theme2/default/ie7/common.css" media="handheld,print,projection,screen,tty,tv" rel="stylesheet" type="text/css" />
		<script src="/js/functions.js" type="text/javascript"></script>
		<script src="/dJS/en/1170289429000/library.js" type="text/javascript"></script>
		<script src="/js/setup.js" type="text/javascript"></script>
	    <script src="/soap/ajax/8.0/connection.js"></script>
	    <script src="/jslibrary/1445535098000/sfdc/main.js"></script>
		{!INCLUDE($SControl.MUSW__lgmCommon)}
		<script id="clientEventHandlersJS" language="javascript">
<!-- 
	var uInfo; 
	var dformat; 
	var tformat = " hh:mm a";
	var feesForUpdate;
	var outstandingFees = new Array(); //2-D array: [outstanding amount, new paid amount]
	//var availableReceipts = new Array();
	var availablePayments = new Array();
	var foundInvoiced;
	
	var mergeData = new Array(); //lookup list of id values
	
	var gPaymentAvailable=0;
	var gTotalPaid=0;
	var gTotalOutstanding=0;
	var gTotalUnallocated=0;
	
	var gPriorPaidAmount=0; //remember what the fee paid amount is before a user change
	
	var permitID = "{!JSENCODE(MUSW__Permit__c.Id)}";
	var complaintID = "{!JSENCODE(MUSW__Complaint__c.Id)}";
	var applicationID = "{!JSENCODE(MUSW__Planning_Application__c.Id)}";
	var licenseID = "{!JSENCODE(MUSW__License1__c.Id)}";
	var invoiceID = "{!JSENCODE(BGBK__Bill__c.Id)}";
	
	var permit2ID = "{!JSENCODE(MUSW__Permit2__c.Id)}";
	var complaint2ID = "{!JSENCODE(MUSW__Complaint2__c.Id)}";
	var application2ID = "{!JSENCODE(MUSW__Application2__c.Id)}";
	var license2ID = "{!JSENCODE(MUSW__License2__c.Id)}";
	
	
	//triggers update this info now
	//var gTotalReceipts = 0;
	//var gTotalFees = 0;
	var parentName = "";
	var parentId = "";
	var parentApi = "";
	var parentObj;
	
	function setup() {
	
		isDebug = {!$User.MUSW__Debug__c};

		if (isDebug) {
			document.getElementById("divDebugHeader").style.display = "block";
			document.getElementById("divDebug").style.display = "block";
		}
		
		if ({!$User.MUSW__Step_Through__c}) {
			//throw uncaught exception so can step through in managed client environment
			throw "e";
		}
	
		uInfo = sforce.connection.getUserInfo(); // has the locale
		dformat = lgm.date.parseDateFormat("{!Today}", uInfo.userLocale);
		
		//Load Picklist information
		initPicklist("MUSW__Receipt__c","MUSW__Payment_Method__c","paymentMethod");
		
		//Load Fee information
		
		var sqlModule = "";
		
		if (permitID != "") {
			parentApi = "MUSW__Permit__c";
			parentName = "MUSW__Permit__c";
			parentId = permitID;
		} else if (complaintID != "") {
			parentApi = "MUSW__Complaint__c";
			parentName = "MUSW__Complaint__c";
			parentId = complaintID;
		} else if (applicationID != "") {
			parentApi = "MUSW__Planning_Application__c";
			parentName = "MUSW__Planning_Application__c";
			parentId = applicationID;
		} else if (licenseID != "") {
			parentApi = "MUSW__License1__c";
			parentName = "MUSW__License1__c";
			parentId = licenseID;
		} else if (permit2ID != "") {
			parentApi = "MUSW__Permit2__c";
			parentName = "MUSW__Permit2__c";
			parentId = permit2ID;
		} else if (complaint2ID != "") {
			parentApi = "MUSW__Complaint2__c";
			parentName = "MUSW__Complaint2__c";
			parentId = complaint2ID;
		} else if (application2ID != "") {
			parentApi = "MUSW__Application2__c";
			parentName = "MUSW__Application2__c";
			parentId = application2ID;
		} else if (license2ID != "") {
			parentApi = "MUSW__License2__c";
			parentName = "MUSW__License2__c";
			parentId = license2ID;
		} else if (invoiceID != "") {
			parentApi = "BGBK__Invoice__c";
			parentName = "BGBK__Bill__c";
			parentId = invoiceID;
		} else 
			sqlModule = " 0=1"; //get nothing

		sqlModule = " " + parentApi + " = '" + parentId + "'";		
		sqlRuleSort = " order by Id";
		
		document.getElementById("pageTitle").innerHTML = "Pay " + formatObjectName(parentApi) + " Fees";
		
		var q = sforce.connection.query("Select " + getFields(parentName, false) + " from " + parentName + " where Id = '" + parentId + "'");
		parentObj = q.getArray("records")[0];
		
		
		//var results = sforce.connection.query("Select Id, MUSW__Type__c, MUSW__Fee_Paid__c, CreatedById, CreatedDate, MUSW__Amount__c, MUSW__Outstanding_Fee__c, MUSW__Amount_Paid__c from MUSW__Fee__c where " + sqlModule + sqlRuleSort);
		var noInvoiceCheck = "";
		if (invoiceID == "")
		{
			noInvoiceCheck = "BGBK__Invoice__c = null and ";
		}
		else
		{
			// check if invoice is voided
			if (parentObj["BGBK__Status__c"] == "Voided")
			{
				document.getElementById("messages").innerHTML = "This Invoice has been Voided. You cannot pay a Voided Invoice.";
				return;
			}
		}
		
		var results = sforce.connection.query("Select " + getFields("MUSW__Fee__c", false) + " from MUSW__Fee__c where MUSW__Fee_Paid__c = false and MUSW__Outstanding_Fee__c > 0 and " + sqlModule + sqlRuleSort);
		var fees2 = results.getArray("records");
		
		var table = document.getElementById("contentTable").getElementsByTagName("TBODY")[0];
		
		var amountTotal = 0;
		var feeAmount = 0;
		
		
		foundInvoiced = false;
		var optionNum = 0;
		var sumUnpaidFees = 0;
		for (var i=0;i<fees2.length;i++) {
			if ((invoiceID == "" && fees2[i]["BGBK__Invoice__c"] == null) || invoiceID != "") { // if parent is invoice: only process invoiced fees for current invoice, else: only process uninvoiced fees
				if ((fees2[i]["MUSW__Amount__c"] != null) && (fees2[i]["MUSW__Outstanding_Fee__c"] != null)) {
					if ((fees2[i]["MUSW__Fee_Paid__c"] == "false") &&  (fees2[i]["MUSW__Outstanding_Fee__c"] > 0)) {
						var row = document.createElement("tr");
						row.className = "dataRow even first";
						row.onblur = "if (window.hiOff){hiOff(this);}' onfocus='if (window.hiOn){hiOn(this);}";			
						row.onmouseout = "if (window.hiOff){hiOff(this);}' onmouseover='if (window.hiOn){hiOn(this);}";
						
						row.appendChild(createCell("th", "row", "dataCell", "<input type='checkbox' id = 'id"+optionNum+"' name = 'ids' value = '" + fees2[i]["Id"] + "' onclick='javascript:setFeePaid("+ optionNum +",this.checked)'/>"));
						row.appendChild(createCell("td", "row", "dataCell", fees2[i]["MUSW__Type__c"]));
						
						// Find out who's the parent of the fee (either Complaint, Application, Permit, or License)
						var fparentList = new Array("MUSW__Complaint__c", "MUSW__Planning_Application__c", "MUSW__Permit__c", "MUSW__License1__c", "MUSW__Complaint2__c", "MUSW__Application2__c", "MUSW__Permit2__c", "MUSW__License2__c");
						var fparentId, fparentName;
						for (x in fparentList) {
							if (fees2[i][fparentList[x]] != null) {
								fparentId = fees2[i][fparentList[x]];
								fparentName = fparentList[x];
								break;
							}
						}
						
						// This query is just to get the Name of the parent
						row.appendChild(createCell("td", "row", "dataCell", lookup(fparentName, "Id", fparentId, "Name")));
						row.appendChild(createCell("td", "row", "dataCell", lookup("User", "Id", fees2[i]["CreatedById"], "Name")));
						row.appendChild(createCell("td", "row", "dataCell", lgm.date.formatDate(lgm.date.parseDate(fees2[i]["CreatedDate"]), dformat )));  //+ tformat
						if ( fees2[i]["MUSW__Outstanding_Fee__c"] != null ) 
							feeAmount = lgm.numeric.round(fees2[i].getFloat("MUSW__Outstanding_Fee__c"),2);
						else
							feeAmount = 0;
						row.appendChild(createCell("td", "row", "dataCell", formatCurrency(feeAmount)));
						row.appendChild(createCell("td", "row", "dataCell", "<input type='text' id = 'paid" + optionNum +"' tabindex='"+ 10+optionNum +"' value = '0' onblur='javascript:feePaid("+optionNum +",this)' onfocus='javascript:feePaidCheck("+ optionNum +",this)'/>"));
						table.appendChild(row);
						
						outstandingFees[optionNum] = [feeAmount,0];
						
						// if coming from invoice then don't use sum of unpaid fees as invoice balance (instead use balance due on invoice)
						if (invoiceID == "") {
							sumUnpaidFees = sumUnpaidFees + feeAmount;
						}
						
						optionNum = optionNum+1;
					}
					//JAW: gTotalFees = gTotalFees + lgm.numeric.round(fees2[i].getFloat("MUSW__Amount__c"),2);
				}
			}
			
			if (invoiceID == "" && fees2[i]["BGBK__Invoice__c"] != null) {
				foundInvoiced = true;
			}
		}
		
		//Notify user if invoiced fees found
		if (fees2.length == 0) {
			document.getElementById("messages").innerHTML = "No uninvoiced, unpaid Fees found.";
		} else if (foundInvoiced) {
			document.getElementById("messages").innerHTML = "This " + formatObjectName(parentApi) + " has prior Invoice(s). Invoiced Fees will not be displayed here. Please go to the appropriate Invoice(s) to pay those Fees."
		}
		
		//if coming from invoice then don't use sum of unpaid fees as invoice balance (instead use balance due on invoice)
		if (invoiceID == "") {
			gTotalOutstanding = sumUnpaidFees;
		} else {
			var invoicer = sforce.connection.query("select BGBK__Balance_Due__c from BGBK__Bill__c where id = '" + invoiceID + "'");
			invoicer = invoicer.getArray("records");
			gTotalOutstanding = invoicer[0]["BGBK__Balance_Due__c"];
		}
				
		//Re-Load Fee information for update
		var results = sforce.connection.query("Select " + getFields("MUSW__Fee__c", true) + " from MUSW__Fee__c Where MUSW__Fee_Paid__c = false and MUSW__Outstanding_Fee__c > 0 and " + noInvoiceCheck + sqlModule + sqlRuleSort);
		feesForUpdate = results.getArray("records");
		
		//***
		//Load Available Payments and Receipts
		
		//first get Payments associated with the parent
		var paymentr = sforce.connection.query("select " + getFields("BGBK__Payment__c", false) + ", BGBK__Receipt__r.Id, BGBK__Receipt__r.MUSW__Amount_Available__c, BGBK__Receipt__r.MUSW__Amount_Tendered__c, BGBK__Receipt__r.MUSW__Track_No__c, BGBK__Receipt__r.MUSW__Payment_Method__c, BGBK__Receipt__r.MUSW__Check_Number__c, BGBK__Receipt__r.MUSW__Receipt_Paid_By__c, BGBK__Receipt__r.MUSW__Comments__c from BGBK__Payment__c where BGBK__Amount_Available__c > 0 and " + sqlModule.replace("MUSW__","BGBK__") + sqlRuleSort);
		paymentr = paymentr.getArray("records");
				
		var pickList = document.getElementById("availablePayment");
		var label = "";
		
		//populate availablePayment picklist
		pickList[pickList.length] = new Option("New Payment");
		optionNum = 1;
		for (var i=0;i<paymentr.length;i++) {
			if (paymentr[i]["BGBK__Amount_Available__c"] > 0.01) {
				label = optionNum + ". " + paymentr[i]["BGBK__Type__c"] + " " + formatCurrency(paymentr[i]["BGBK__Amount__c"]) + " Available: " + formatCurrency(paymentr[i]["BGBK__Amount_Available__c"]);
				pickList[pickList.length] = new Option(label);
								
				availablePayments[optionNum] = paymentr[i];
				optionNum = optionNum + 1;
			}
			//JAW: gTotalReceipts = gTotalReceipts + lgm.numeric.round(receipts[i].getFloat(["MUSW__Amount_Tendered__c"]),2);
		}
		
		//update totals in window
		document.getElementById('amountTotal').innerHTML = formatCurrency(gTotalOutstanding);
		document.getElementById('paidTotal').innerHTML = formatCurrency(gTotalPaid);
		document.getElementById('unallocatedTotal').innerHTML = formatCurrency(gTotalUnallocated);
		//default tendered amount
		document.getElementById("tenderedAmount").value =lgm.numeric.round(gTotalOutstanding,2); 
		
		//set focus on first field
		document.getElementById("tenderedAmount").focus();
	}

	function getFields(sobject, forUpdate) {
		var fields = sforce.connection.describeSObject(sobject).fields;
		var fieldList = "";
		
		if (!forUpdate) {
			for (var i=0; i<fields.length; i++) {
				fieldList = fieldList + fields[i].name + ", ";
			}
		} else {
			fieldList = "Id, ";
			for (var i=0; i<fields.length; i++) {
				if (fields[i].updateable == true || fields[i].updateable == "true") {
					fieldList = fieldList + fields[i].name + ", ";
				}
			}
		}
		
		//chop off last comma
		fieldList = fieldList.substring(0, fieldList.length-2);
		return fieldList;
	}
	
	function createCell(type, scope, className, innerHTML) {
		var retVal = document.createElement(type);
		retVal.scope = scope;
		retVal.className = className;
		retVal.innerHTML = innerHTML;
		return retVal;
	}
	
	
	var lookupCache = new Array(); //array of maps containing Ids of all objects queried for by lookup(), their fields,s and the corresponding values returned by lookup()
	
	// When given a table name, Id, and wanted fields query for field data and return the related info
	function lookup(object, id, idValue, fields) {
		//see if the value for the object to be queried is already available in cache
		for (x in lookupCache) {
			if (lookupCache[x].id == idValue && lookupCache[x].fields == fields) {
				return lookupCache[x].value;
			}
		}
		
		var lookupValue = mergeData[object+idValue+fields];
	
		//if we do not have the lookup field values already, query for them
		if (lookupValue == null ) {	
			lookupValue = idValue;
			var results = sforce.connection.query("Select Id, " + fields + " from " + object + " Where " + id + " = '" + idValue + "'");
			var table = results.getArray("records");
			
			if (table.length > 0) {
				// expect only loop once
				for (var i=0;i<table.length;i++) {						
					var fieldList = ", " + fields + ",";
					lookupValue = "";
			
					//get wanted field values from record
					while (fieldList.indexOf(",") != -1 && fieldList.length > 1 ) {
						var startQuotePos = fieldList.indexOf(", ")+1;
						var endQuotePos = fieldList.indexOf(",", startQuotePos+1);
						var fieldName = fieldList.substring(startQuotePos+1,endQuotePos); // get column name to retrieve from record

						lookupValue = lookupValue + " " + table[i].get(fieldName); //build list of field values with " " between them
						fieldList = fieldList.substring(endQuotePos);
					}
				}
				//add lookupValue to list
				mergeData[object+idValue+fields] = lookupValue;
			}
		}
		
		//add the object id + lookupValue to cache
		lookupCache.push({id:idValue, fields:fields, value:lookupValue});
		
		return lookupValue;
	}
	
	//validate field values
	function validateForm()
	{

		var availablePayment = document.getElementById("availablePayment");
	
		//JAWvar payment = document.getElementById("paymentAmount");
		if (gPaymentAvailable == 0) {
			alert("Enter a new Tendered Amount or choose from Available Payments"); 
			return false;
		}
		
		if (invoiceID != "") {
			if (gTotalUnallocated > 0) {
				alert("When paying an Invoice you cannot have any unused (remaining) amounts.");
				return false;
			}
			else if ((availablePayment.selectedIndex == 0) && document.getElementById("paymentAmount").value > gTotalOutstanding-0) {
				alert("The Payment Amount cannot be greater than the Amount Owing ($" + gTotalOutstanding + "). \nReduce Tendered Amount to Amount Owing");
				return false;
			}
		}

		if (gTotalPaid == 0) {
			alert("Select Fees to pay."); 
			return false;
		}
		
		//if a new payment, ensure required receipt fields are filled in
		if ((availablePayment.selectedIndex == 0) && ((document.getElementById("tenderedAmount").value == ""))) {
			alert("Enter Tendered Amount."); 
			return false;
		}
			
		if ((availablePayment.selectedIndex == 0) && (gPaymentAvailable > document.getElementById("tenderedAmount").value)) {
			alert("Payment amount cannot be greater than Tendered. \nReduce Payment Amount to or below Tendered Amount."); 
			return false;
		}	
		
		//if not a new payment, ensure payment is no more than available amount
		if ((availablePayment.selectedIndex != 0) && (gPaymentAvailable > availablePayments[availablePayment.selectedIndex]["MUSW__Amount_Available__c"])) {
			alert("Payment has insuffient available amount. Reduce payment."); 
			return false;
		}
		
		if (gPaymentAvailable < gTotalPaid ) {
			alert("Can not pay more than Payment Amount. Reduce Paid Amount(s)."); 
			return false;
		}
		
		var receiptNumber = document.getElementById("receiptNumber").value;
		if ((receiptNumber != "") && (receiptNumber != null)) {var setreceiptNumber = true;} else {var setreceiptNumber = false;}
		
		//check if receipt number already in use (if manually entered and creating a new payment/receipt)
		if ((setreceiptNumber) && ((availablePayment.selectedIndex == 0))) { 
			var result = sforce.connection.query("Select MUSW__Track_No__c from MUSW__Receipt__c where MUSW__Track_No__c = '" + receiptNumber + "'");
			var receiptCheck = result.getArray("records");
			if (receiptCheck.length > 0) {
				alert("Receipt Number already in use.\nIf you are allocating a prior receipt (split receipt), then append a letter to the back of Receipt Number eg. 12345-B\nenter Tendered Amount: full receipt, and Payment Amount: portion allocated."); 
				return false;
			}
		}

		return true; //fields are valid
	}

	// Called when user clicks Submit
	function makePayment(form, element_name, value, redirectToReceipt) { 
		
		var valid = validateForm();
		
		if (!valid) 
		{
			document.getElementById("update").disabled=false; //re-enable update button
			document.getElementById("updatePrint").disabled=false; //re-enable updatePrint button
			return;
		}
		
		var availablePayment = document.getElementById("availablePayment");
		
		if (gTotalPaid < gPaymentAvailable) { 
			var x = window.confirm("Confirm partial Payment?"); 
			if (!x) { 
				document.getElementById("update").disabled=false; //re-enable update button
				document.getElementById("updatePrint").disabled=false; //re-enable updatePrint button
				return;
			} 
		}
		
		
		
		//Set payment defaults
		
		var updateObjects = 0;
		//MOS var feePaidinFull = false;
		
		var paidDate = document.getElementById("paidDate").value;

		if ((paidDate != "") && (paidDate != null)) {
			var setPaidDate = true;
			paidDate = lgm.date.formatDate(new Date (paidDate), dformat ); //+ tformat
		} else {
			var setPaidDate = false;
		}
		
		//get receipt info
		
		var feePaidBy = document.getElementById("feePaidBy_lkid").value;
		if ((feePaidBy != "") && (feePaidBy != null) && (feePaidBy != "000000000000000")) {var setfeePaidBy = true;} else {var setfeePaidBy = false;}
	
		var paymentMethod = document.getElementById("paymentMethod");
		var paymentMethod = paymentMethod[paymentMethod.selectedIndex].text;
		if ((paymentMethod != "") && (paymentMethod != null)) {var setpaymentMethod = true;} else {var setpaymentMethod = false;}
	
		var paymentComment = document.getElementById("paymentComment").value;
		if ((paymentComment != "") && (paymentComment != null)) {var setpaymentComment = true;} else {var setpaymentComment = false;}
		
		var receiptNumber = document.getElementById("receiptNumber").value;
		if ((receiptNumber != "") && (receiptNumber != null)) {var setreceiptNumber = true;} else {var setreceiptNumber = false;}
		
		var checkNumber = document.getElementById("checkNumber").value;
		if ((checkNumber != "") && (checkNumber != null)) {var setcheckNumber = true;} else {var setcheckNumber = false;}
		

		var receiptRec = new sforce.SObject("MUSW__Receipt__c");
		
		//set receipt data
		
		//if using existing receipt
		if (availablePayment.selectedIndex != 0) {
			var newPayment = false;
			receiptRec.set("Id",availablePayments[availablePayment.selectedIndex]["BGBK__Receipt__r"]["Id"]);
			//decrement available amount of receipt based on total new payments
			//MOS receiptRec.set("MUSW__Amount_Available__c",gTotalUnallocated);
			//MOS James said that Amount Avbl on Receipt has to be zero (it's a legacy field). All leftover amounts are gone into an Allocation pmt
			//JAW handled by trigger: receiptRec.set("MUSW__Amount_Available__c", 0);
		} else { //new payment/receipt
			var newPayment = true;
			//receiptRec.set("MUSW__Amount_Available__c",gTotalUnallocated);  //new value as the result of the following fees paid
			//amount available is reduced by payment trigger 
			receiptRec.set("MUSW__Amount_Available__c", lgm.numeric.round(document.getElementById("tenderedAmount").value-0,2));
			receiptRec.set("MUSW__Amount_Tendered__c",lgm.numeric.round(document.getElementById("tenderedAmount").value-0,2));
		
			if (setfeePaidBy == true) {
				receiptRec.set("MUSW__Receipt_Paid_By__c",feePaidBy);
			}
			if (setPaidDate == true) {
				receiptRec.set("MUSW__Effective_Date__c",new Date(paidDate));
			}
			if (setpaymentMethod == true) {
				receiptRec.set("MUSW__Payment_Method__c",paymentMethod);
			}
			if (setreceiptNumber == true) {
				receiptRec.set("MUSW__Track_No__c",receiptNumber);
			}
			if (setcheckNumber == true) {
				receiptRec.set("MUSW__Check_Number__c",checkNumber);
			}
			if (setpaymentComment == true) {
				receiptRec.set("MUSW__Comments__c", paymentComment);
			}
			
			//JAW: gTotalReceipts = gTotalReceipts + lgm.numeric.round(document.getElementById("tenderedAmount").value-0,2);
		}


		//set fee and feepayment fields
		var feePayments = new Array(); //array containing feePayments and their corresponding payment indeces (in payments array)
		var iii = 0;
		var payments = new Array();
		//var parent2s = new Array(); // list of non-invoice parents
		for (var i = 0; i < form.elements.length; i++) { 
			if ((form.elements[i].name == element_name) && (form.elements[i].checked)) { 
				for(var ii=0; ii<feesForUpdate.length; ii++) {
					if (form.elements[i].value == feesForUpdate[ii]["Id"]) {   // only checked paid fees
						updateObjects++;
						
						//create fee payment record and set data
						
						var feePaymentRec = new sforce.SObject("MUSW__Fee_Payment__c");
						
						feePaymentRec.set("MUSW__Fee__c",feesForUpdate[ii]["Id"]);
						feePaymentRec.set("MUSW__Fee_Amount__c",feesForUpdate[ii]["MUSW__Amount__c"]);
						feePaymentRec.set("MUSW__Paid_Date__c",new Date(paidDate));
						feePaymentRec.set("MUSW__Payment_Amount__c",outstandingFees[ii][1]);
						
						if (!newPayment) { //set Receipt and Payment Ids
							feePaymentRec.set("MUSW__Receipt__c",availablePayments[availablePayment.selectedIndex]["BGBK__Receipt__r"]["Id"]);
							feePaymentRec.set("MUSW__Receipt_Amount_Tendered__c",lgm.numeric.round(availablePayments[availablePayment.selectedIndex]["BGBK__Receipt__r"].getFloat(["MUSW__Amount_Tendered__c"]),2));
							feePaymentRec.set("MUSW__Receipt_Amount_Available__c",lgm.numeric.round(availablePayments[availablePayment.selectedIndex]["BGBK__Receipt__r"].getFloat(["MUSW__Amount_Tendered__c"]),2));
						} else {
							feePaymentRec.set("MUSW__Receipt_Amount_Tendered__c",receiptRec["MUSW__Amount_Tendered__c"]);
							feePaymentRec.set("MUSW__Receipt_Amount_Available__c",receiptRec["MUSW__Amount_Tendered__c"]);
						}
						
						//set fee data
						
						//MOS 
						/*
						//if outstanding amount = amount paid
						if(lgm.numeric.round(outstandingFees[ii][0],2) == outstandingFees[ii][1] ) {
							paidinFull = true;
							feesForUpdate[ii]["MUSW__Amount_Paid__c"] = outstandingFees[ii][1];
						}else { //add to the initial amount paid
							paidinFull = false; //add to the amount paid
							feesForUpdate[ii]["MUSW__Amount_Paid__c"] = feesForUpdate[ii]["MUSW__Amount_Paid__c"]-0 + outstandingFees[ii][1];
						}
						*/
						
						//MOS feesForUpdate[ii]["MUSW__Fee_Paid__c"] = paidinFull;

						if (setPaidDate == true) {
							feesForUpdate[ii]["MUSW__Fee_Paid_Date2__c"] = new Date(paidDate); 
						}
						if (setfeePaidBy == true) {
							feesForUpdate[ii]["MUSW__Fee_Paid_By__c"] = feePaidBy;
						}
						if (setpaymentMethod == true) {
							feesForUpdate[ii]["MUSW__Payment_Method__c"] = paymentMethod;
						}
						if (setreceiptNumber == true) {
							feesForUpdate[ii]["MUSW__Receipt_Number__c"] = receiptNumber;
						}
						if (setcheckNumber == true) {
							feesForUpdate[ii]["MUSW__Check_Number__c"] = checkNumber;
						}
						if (setpaymentComment == true) {
							if (feesForUpdate[ii]["MUSW__Payment_Comment__c"] > "") {
								feesForUpdate[ii]["MUSW__Payment_Comment__c"] = feesForUpdate[ii]["MUSW__Payment_Comment__c"] + "\n" + paymentComment;
							} else {
								feesForUpdate[ii]["MUSW__Payment_Comment__c"] = paymentComment;
							}
						}
						
												
						//find the non-invoice parent (parent2)
						var parent2Id = "";
						var parent2Name = "";
						if (feesForUpdate[ii]["MUSW__Permit__c"] != null) {
							parent2Id = feesForUpdate[ii]["MUSW__Permit__c"];
							parent2Name = "MUSW__Permit__c";
						} else if (feesForUpdate[ii]["MUSW__Planning_Application__c"] != null) {
							parent2Id = feesForUpdate[ii]["MUSW__Planning_Application__c"];
							parent2Name = "MUSW__Planning_Application__c";
						} else if (feesForUpdate[ii]["MUSW__Complaint__c"] != null) {
							parent2Id = feesForUpdate[ii]["MUSW__Complaint__c"];
							parent2Name = "MUSW__Complaint__c";
						} else if (feesForUpdate[ii]["MUSW__License1__c"] != null) {
							parent2Id = feesForUpdate[ii]["MUSW__License1__c"];
							parent2Name = "MUSW__License1__c";
						} else if (feesForUpdate[ii]["MUSW__Permit2__c"] != null) {
							parent2Id = feesForUpdate[ii]["MUSW__Permit2__c"];
							parent2Name = "MUSW__Permit2__c";
						} else if (feesForUpdate[ii]["MUSW__Application2__c"] != null) {
							parent2Id = feesForUpdate[ii]["MUSW__Application2__c"];
							parent2Name = "MUSW__Application2__c";
						} else if (feesForUpdate[ii]["MUSW__Complaint2__c"] != null) {
							parent2Id = feesForUpdate[ii]["MUSW__Complaint2__c"];
							parent2Name = "MUSW__Complaint2__c";
						} else if (feesForUpdate[ii]["MUSW__License2__c"] != null) {
							parent2Id = feesForUpdate[ii]["MUSW__License2__c"];
							parent2Name = "MUSW__License2__c";
						}
						
						//set payment and parent2 data
						
						if (newPayment) { //new payment allocation (or split-allocations in the case of paying an invoice associated to multiple fee-parents )
							var paymentRec = (payments[parent2Id] != null) ? payments[parent2Id].pr : null;
							if (paymentRec == null) {  // new payment allocation
								var paymentRec = new sforce.SObject("BGBK__Payment__c");
								paymentRec.set(parent2Name.replace("MUSW__","BGBK__"), parent2Id);
								paymentRec.set("BGBK__Invoice__c", invoiceID);
								//MOS paymentRec.set("BGBK__Amount__c", lgm.numeric.round(document.getElementById("paymentAmount").value-0,2));
								//MOS paymentRec.set("BGBK__Amount_Used__c", feePaymentRec["MUSW__Payment_Amount__c"]);
								paymentRec.set("BGBK__Amount__c", lgm.numeric.round(parseFloat(feePaymentRec["MUSW__Payment_Amount__c"]),2));
								paymentRec.set("BGBK__Type__c", "Allocation");
								
								payments[parent2Id] = {pr:paymentRec, index:payments.length};
								payments.length++;
							} else { // add to payment amount
								var newAmt = parseFloat(payments[parent2Id].pr["BGBK__Amount__c"]) + parseFloat(feePaymentRec["MUSW__Payment_Amount__c"]);
								newAmt = lgm.numeric.round(newAmt, 2);
								payments[parent2Id].pr.set("BGBK__Amount__c", newAmt);
								//MOS payments[parent2Id].pr.set("BGBK__Amount_Used__c", payments[parent2Id].pr["BGBK__Amount_Used__c"]-0 + feePaymentRec["MUSW__Payment_Amount__c"]-0);
							}
						} else { //use and update available allocated payment
							var paymentRec = new sforce.SObject("BGBK__Payment__c");
							paymentRec.set("Id", availablePayments[availablePayment.selectedIndex]["Id"]);
							//MOS paymentRec.set("BGBK__Amount_Used__c", availablePayments[availablePayment.selectedIndex]["BGBK__Amount_Used__c"]-0 + feePaymentRec["MUSW__Payment_Amount__c"]);
							
							payments[parent2Id] = {pr:paymentRec, index:0}; // always only 1 payment since working with an exisitng one
						}
						
						//preserve the order of payments to be used later
						feePayments.push({fpr:feePaymentRec, paymentIndex:payments[parent2Id].index});
					}
				}
			} 
		}

		if (updateObjects > 0) { 
			//var x = window.confirm("You are about to make these payments. Proceed?");
			//if (x) {
			
			var goterr = false;
			var sr1, sr2;
			if (newPayment) { 
				sr1 = sforce.connection.update(feesForUpdate);
				sr2 = sforce.connection.create([receiptRec]);
			} else {
				sr2 = sforce.connection.update([receiptRec]);
				sr1 = sforce.connection.update(feesForUpdate);
			}
			goterr = validateSforceAction(sr1, "Fee Update");
			if (goterr) return;
			goterr = validateSforceAction(sr2, "Receipt Insert/Update");
			if (goterr) return;
			
			//upsert payments
			var paymentsForUpsert = new Array();
			for (x in payments) {
				if (newPayment) {
					payments[x].pr.set("BGBK__Receipt__c",sr2[0]["id"]);
				}	 
				paymentsForUpsert.push(payments[x].pr);
			}
			
			var sr3;
			if (newPayment) 
				sr3 = sforce.connection.create(paymentsForUpsert);
			else
				sr3 = sforce.connection.update(paymentsForUpsert);
			
			goterr = validateSforceAction(sr3, "Payment Insert/Update");
			if (goterr) return;
			
			//insert fee payments
			var feePaymentsForInsert = new Array();
			for (y in feePayments) {
				feePayments[y].fpr.set("MUSW__Receipt__c",sr2[0]["id"]);
				feePayments[y].fpr.set("BGBK__Payment__c", sr3[feePayments[y].paymentIndex]["id"]);
				feePaymentsForInsert.push(feePayments[y].fpr);
			}
			
			var sr4 = sforce.connection.create(feePaymentsForInsert);
			goterr = validateSforceAction(sr4, "FeePayment Insert");
			if (goterr) return;
			
			if (redirectToReceipt) {
				
				
				
				/* MOS: WEBLINKS NEED THE CUSTOMIZE APPLICATION PERMISSION (some profiles don't have it)
				var pkgName;
				if (applicationID != "") {
					pkgName = "Planning";
				} else {
					pkgName = parentApi.replace("MUSW__","");
					pkgName = pkgName.replace("BGBK__","");
					pkgName = pkgName.replace("__c","");
				}
				
				var weblink = sforce.connection.query("select Id, MasterLabel, Name, Height, Width, ShowsLocation, IsResizable, HasToolbar, ShowsStatus, HasMenubar, HasScrollbars from WebLink where MasterLabel = 'Print Receipt (" + pkgName + ")' limit 1");
				weblink = weblink.getArray("records")[0];
				//var pageRef = "javascript:openIntegration%28%27%2Fservlet%2Fservlet.Integration%3Flid%3D" + weblink["Id"] + "%26eid%3D" + sr2[0]["id"] + "%26ic%3D1%27%2C%20%27height%3D" + weblink["Height"] + "%2Cwidth%3D" + weblink["Width"] + "%2Clocation%3D" + ((weblink["ShowsLocation"]) ? "yes" : "no") + "%2Cresizable%3D" + ((weblink["IsResizable"]) ? "yes" : "no") + "%2Ctoolbar%3D" + ((weblink["HasToolbar"]) ? "yes" : "no") + "%2Cstatus%3D" + ((weblink["ShowsStatus"]) ? "yes" : "no") + "%2Cmenubar%3D" + ((weblink["HasMenubar"]) ? "yes" : "no") + "%2Cscrollbars%3D" + ((weblink["HasScrollbars"]) ? "1" : "0") + "%27%2C%201%29";
				var pageRef = "/servlet/servlet.Integration?lid=" + weblink["Id"] + "&eid=" + sr2[0]["id"] + "&ic=1";
				var func = "height=" + weblink["Height"] + ",width=" + weblink["Width"] + ",location=" + ((weblink["ShowsLocation"]) ? "yes" : "no") + ",resizable=" + ((weblink["IsResizable"]) ? "yes" : "no") + ",toolbar=" + ((weblink["HasToolbar"]) ? "yes" : "no") + ",status=" + ((weblink["ShowsStatus"]) ? "yes" : "no") + ",menubar=" + ((weblink["HasMenubar"]) ? "yes" : "no") + ",scrollbars=" + ((weblink["HasScrollbars"]) ? "1" : "0");
				window.open(pageRef, 'Receipt', func);
				*/
				
				try {
					var pageRef;
					if (permitID != "" || permit2ID != "") {
						pageRef = '{!URLFOR( $SControl.MUSW__PrintAnythingDriver, MUSW__Receipt__c.Id, [package="Printable Receipt (Permit)"])}' + '&eid=' + sr2[0]["id"];
					} else if (applicationID != "" || application2ID != "") {
						pageRef = '{!URLFOR( $SControl.MUSW__PrintAnythingDriver, MUSW__Receipt__c.Id, [package="Printable Receipt (Planning)"])}' + '&eid=' + sr2[0]["id"];
					} else if (licenseID != "" || license2ID != "") {
						pageRef = '{!URLFOR( $SControl.MUSW__PrintAnythingDriver, MUSW__Receipt__c.Id, [package="Printable Receipt (License)"])}' + '&eid=' + sr2[0]["id"];
					} else if (invoiceID != "") {
						pageRef = '{!URLFOR( $SControl.MUSW__PrintAnythingDriver, MUSW__Receipt__c.Id, [package="Printable Receipt (Invoice)"])}' + '&eid=' + sr2[0]["id"];
					} else if (complaintID != "" || complaint2ID != "") {
						pageRef = '{!URLFOR( $SControl.MUSW__PrintAnythingDriver, MUSW__Receipt__c.Id, [package="Printable Receipt (Complaint)"])}' + '&eid=' + sr2[0]["id"];
					}
					
					var func = "height=800,width=725,location=no,resizable=yes,toolbar=no,status=no,menubar=no,scrollbars=1";
					window.open(pageRef, 'Receipt', func);
				} catch (err) {
					alert("An error has occured when attempting to print the Receipt. Please contact BasicGov Support. ERROR: " + err);
				}
					
				}
				
				// Create payment for leftovers (unallocated)
				// If for Invoices then set the Payment's parent (e.g. Permit) to the last Permit in the list
				if (gTotalUnallocated > 0 && newPayment) {
					var paymentRecLeftover = new sforce.SObject("BGBK__Payment__c");
					paymentRecLeftover.set(parent2Name.replace("MUSW__","BGBK__"), parent2Id);
					paymentRecLeftover.set("BGBK__Receipt__c", sr2[0]["id"]);
					paymentRecLeftover.set("BGBK__Invoice__c", invoiceID);
					paymentRecLeftover.set("BGBK__Amount__c", gTotalUnallocated);
					paymentRecLeftover.set("BGBK__Type__c", "Allocation");
					var sr5 = sforce.connection.create([paymentRecLeftover]);
					goterr = validateSforceAction(sr5, "Payment Insert");
					if (goterr) return;
				}
				
				var pageRef = (invoiceID != "") ? "../" + invoiceID : "../" + parentId;
				window.parent.parent.location.href = pageRef;
			//}
		}
		//MOS
		/*else {  //not paying fees
			var x = window.confirm("You are only allocating payments without paying fees. Proceed?");
			if (x) {
				
				var sr2;
				if (newPayment) { 
					sr2 = sforce.connection.create([receiptRec]);
				} else {
					sr2 = sforce.connection.update([receiptRec]);
				}
				validateSforceAction(sr2);
				
				var paymentRec = new sforce.SObject("BGBK__Payment__c");
				paymentRec.set(parentApi.replace("MUSW__","BGBK__"), parentId);
				paymentRec.set("BGBK__Receipt__c", sr2[0]["id"]);
				paymentRec.set("BGBK__Amount__c", 0);
				paymentRec.set("BGBK__Type__c", "Allocation");
				var sr3 = sforce.connection.create([paymentRec]);
				validateSforceAction(sr3);
			}
		}*/
	}
	
	// Check for status of sforce actions (e.g. update, create, etc). If errors then show through lgm.debug.addMessage('msg'). Can pass array or single object for action.
	function validateSforceAction(action, actionName) {
		var gotError = false;
		if (action.length > 0) { //an array was passed
			for (x in action) { //loop thru data on which the action (e.g. update) was performed and check their status
				if (!action[x].getBoolean("success")) {
					lgm.debug.addMessage("sforce.connection action failure: " + action[x].errors.message);
					document.getElementById("messages").innerHTML += "<br/>" + actionName + " Error: " + action[x].errors.message;
					gotError = true;
				}
			}
		} else {
			if (!action.getBoolean("success")) {
				lgm.debug.addMessage("sforce.connection action failure: " + action.errors.message);
				document.getElementById("messages").innerHTML += "<br/>" + actionName + " Error: " + action[x].errors.message;
				gotError = true;
			}
		}
		
		//if there are error message, re-enable submit buttons
		//JAW Review - no rollback of bad data and yet allowed to save again
		if (gotError)
		{
			document.getElementById("update").disabled=false; //re-enable update button
			document.getElementById("updatePrint").disabled=false; //re-enable updatePrint button
		}
		
		return gotError;
	}
	
	function formatObjectName(myObjectName) {
		return lgm.string.replaceAll(lgm.string.replaceAll(lgm.string.replaceAll(lgm.string.replaceAll(myObjectName,"MUSW__",""),"__c",""),"BGBK__", ""),"_", " ");// format table/field name
	}
	
	function cancelUpdate() { 
		window.parent.parent.location.href ="../{!URLENCODE(BGBK__Bill__c.Id)}{!URLENCODE(MUSW__Permit__c.Id)}{!URLENCODE(MUSW__Complaint__c.Id)}{!URLENCODE(MUSW__Planning_Application__c.Id)}{!URLENCODE(MUSW__License1__c.Id)}{!URLENCODE(MUSW__Permit2__c.Id)}{!URLENCODE(MUSW__Complaint2__c.Id)}{!URLENCODE(MUSW__Application2__c.Id)}{!URLENCODE(MUSW__License2__c.Id)}"; 
	}
	
	//A fee has been un/paid, update internal fees and totals
	function refreshPaymentInfo(amount, optionNum) {
		outstandingFees[optionNum][1] = lgm.numeric.round(amount,2);
		refreshTotals(outstandingFees[optionNum][1]);
	
	}
	
	//A fee has been un/paid, update totals
	function refreshTotals(amount) {
		gTotalPaid = lgm.numeric.round(gTotalPaid - gPriorPaidAmount + lgm.numeric.round(amount,2),2);
		gTotalUnallocated = lgm.numeric.round(gPaymentAvailable - gTotalPaid,2);
		document.getElementById('paidTotal').innerHTML = formatCurrency(gTotalPaid);
		document.getElementById('unallocatedTotal').innerHTML = formatCurrency(gTotalUnallocated);
	}
	
	
	function feePaid(optionNum, paidField) { //on Paid amount blur
		
		var checked = document.getElementById("id"+optionNum);
	
		//validation
		
		if ((paidField.value < 0)) {
			alert("Enter Fee Amount Paid >= 0");
			paidField.focus();
		}
		
		if (lgm.numeric.round(paidField.value,2) > lgm.numeric.round(outstandingFees[optionNum][0],2)) {
			alert("Can not enter Fee Amount Paid more than Fee Amount Outstanding");
			paidField.focus();
		}
		
		if (paidField.value == 0) //then uncheck
			document.getElementById("id"+optionNum).checked = false;
		
		
		//set internal data and totals 
		refreshPaymentInfo(paidField.value, optionNum);
	}
	
	function feePaidCheck(optionNum, field) { //on Paid amount focus
		
		gPriorPaidAmount = lgm.numeric.round(field.value-0,2); //remember old value so that when leave field, can recalc total paid
		
		var checked = document.getElementById("id"+optionNum);
	
		checked.checked = true;
	}
	
	function SelectPayment(payment) { //on Select Payment blur
		//reset values
		
		var totalAvailable = document.getElementById("paymentAmount");
		var amountTendered = document.getElementById("tenderedAmount");
		var receiptNumber = document.getElementById("receiptNumber");
		var issueNumber = document.getElementById("popTrackNo");
		var paymentMethod = document.getElementById("paymentMethod");
		var checkNumber = document.getElementById("checkNumber");
		var paidById = document.getElementById("feePaidBy_lkid");
		var searchPaidBy = document.getElementById("feePaidBy_lkwgt");
		var paidBy = document.getElementById("feePaidBy");
		var comments = document.getElementById("paymentComment");
		
		
		
		//if using existing receipt
		if (payment.selectedIndex-1 >= 0) {
			totalAvailable.value = lgm.nvl(availablePayments[payment.selectedIndex]["BGBK__Amount_Available__c"],"");
			gPaymentAvailable = lgm.numeric.round(lgm.nvl(availablePayments[payment.selectedIndex]["BGBK__Amount_Available__c"],0),2);
			amountTendered.value = lgm.nvl(availablePayments[payment.selectedIndex]["BGBK__Receipt__r"]["MUSW__Amount_Tendered__c"],"");
			receiptNumber.value = lgm.nvl(availablePayments[payment.selectedIndex]["BGBK__Receipt__r"]["MUSW__Track_No__c"],"");
			paymentMethod.selectedIndex = picklistIndexLookup(paymentMethod, lgm.nvl(availablePayments[payment.selectedIndex]["BGBK__Receipt__r"]["MUSW__Payment_Method__c"],""));
			checkNumber.value = lgm.nvl(availablePayments[payment.selectedIndex]["BGBK__Receipt__r"]["MUSW__Check_Number__c"],"");
			paidById.value = lgm.nvl(availablePayments[payment.selectedIndex]["BGBK__Receipt__r"]["MUSW__Receipt_Paid_By__c"],""); 
			if (paidById.value > " ") {paidBy.value = "*****"; }//JAW REVIEW look up name instead. 
			comments.value = lgm.nvl(availablePayments[payment.selectedIndex]["BGBK__Receipt__r"]["MUSW__Comments__c"],"");
			
			amountTendered.disabled = true;
			receiptNumber.disabled = true;
			paymentMethod.disabled = true;
			checkNumber.disabled = true;
			paidBy.disabled = true;
			comments.disabled = true;
			
			totalAvailable.disabled = true;
			
			issueNumber.style.visibility = "hidden";
			searchPaidBy.style.visibility = "hidden";
			
			
		} else {
			totalAvailable.value = "";
			gPaymentAvailable = gTotalOutstanding;
			
			amountTendered.value = "";
			receiptNumber.value = "";
			paymentMethod.selectedIndex = paymentMethod.defaultOption;
			checkNumber.value = "";
			paidById.value = "";
			paidBy.value = "";
			comments.value = "";
			
			amountTendered.disabled = false;
			totalAvailable.disabled = false;
			amountTendered.value = gPaymentAvailable;
			totalAvailable.value = gPaymentAvailable;
			
			receiptNumber.disabled = false;
			paymentMethod.disabled = false;
			checkNumber.disabled = false;
			paidBy.disabled = false;
			comments.disabled = false;
			
			
			
			issueNumber.style.visibility = "visible";
			searchPaidBy.style.visibility = "visible";
		}
		
		
		gPriorPaidAmount = 0;
		refreshTotals(0);
	}
	
	//when check-all is un/checked, un/pay all fees
	function setFeesPaid(val) {
		for(var i=0; i<feesForUpdate.length; i++) {
			setFeePaid(i,val);
		}
	}
	
	//when un/check fee, un/pay it
	function setFeePaid(optionNum,val) {
	
		var amount = 0;
		var paidfield = document.getElementById("paid"+optionNum);
		gPriorPaidAmount = lgm.numeric.round(paidfield.value-0,2);
		if (val) {
			amount = lgm.numeric.round(outstandingFees[optionNum][0],2);
		}else {
			amount = 0;
		} 
		
		//set fee field
		paidfield.value = amount;
		
		//set totals and internal info
		refreshPaymentInfo(amount,optionNum);
	}
	
	//when exit tendered amount, set payment amount
	function blurTenderedAmount(field) {
		if (field.value != "") {
			if (field.value - 0 != 0) {
				var paymentField = document.getElementById("paymentAmount");
				paymentField.value = lgm.numeric.round(field.value,2);
				gPaymentAvailable = lgm.numeric.round(field.value,2);
				gPriorPaidAmount = 0;
				refreshTotals(0);
			}
		}
		
		document.getElementById("availablePayment").selectedIndex = 0;
	}
	
	//when exit Payment amount, set global payment amount
	function blurPaymentAmount(field) {
		if (field.value != "") {
			if (field.value - 0 != 0) {
				gPaymentAvailable = lgm.numeric.round(field.value,2);
				gPriorPaidAmount = 0;
				refreshTotals(0);
			}
		}
		
	}
	
	function initPicklist(object, picklist, element) {
		var obj = sforce.connection.describeSObject(object);			
		var pickList = document.getElementById(element);
		var defaultOption = 0;
		var defaultVal = "false";
		
		for (var i=0;i<obj.fields.length;i++) {
			if (obj.fields[i].name == picklist)
			{
				for (var ii=0;ii<obj.fields[i].picklistValues.length;ii++) {
					if (obj.fields[i].picklistValues[ii].defaultValue=="true") {
						defaultOption = ii;
						defaultVal = "true";
					} else {
						defaultVal = "false";
					}
					pickList[pickList.length] = new Option(obj.fields[i].picklistValues[ii].label,ii,defaultVal);
				}
				pickList[defaultOption].selected = true;
			}
		}
	}	
	
	function picklistIndexLookup(picklist, value) {
		for (var i=0;i<picklist.length;i++) {
			if (picklist[i].text == value ) {
				return i;
			}
		}
	}
	
	function formatCurrency(num) {
	num = num.toString().replace(/\$|\,/g,'');
	if(isNaN(num)) {
	num = "0";}
	sign = (num == (num = Math.abs(num)));
	num = Math.floor(num*100+0.50000000001);
	cents = num%100;
	num = Math.floor(num/100).toString();
	if(cents<10) {
	cents = "0" + cents;}
	for (var i = 0; i < Math.floor((num.length-(1+i))/3); i++)
	num = num.substring(0,num.length-(4*i+3))+','+ num.substring(num.length-(4*i+3));
	return (((sign)?'':'-') + '$' + num + '.' + cents);
}
	
//--> 
		</script>
	</head>
	<body onLoad="setup();" >	
		<table class="" width="100%" id="bodyTable" border="0" cellspacing="0" cellpadding="0">
			<tr>
				<td class="oRight" id="bodyCell">
					<a name="skiplink"><img src="/s.gif" height='1' width='1' alt="Content Starts Here" class="skiplink" title="Content Starts Here"></a>
					<!-- HEADER SECTIONS -->
					<div class="bPageTitle">
						<div class="ptBody secondaryPalette">
							<div class="content">
								<img src="/s.gif" alt="Permit" class="pageTitleIcon" title="Permit">
								<h1 class="pageType" id="pageTitle">Pay Fees<span class="titleSeparatingColon">:</span></h1>
								<h2 class="pageDescription">Receive New Payment or Use Available Amounts</h2>
								<div class="blank">&nbsp;</div>
							</div>
							<div class="links">
								<a href="javascript:openPopupFocusEscapePounds('/help/doc/user_ed.jsp?loc=help&target=co_overview.htm&section=CustomObjects', 'Help', 700, 600, 'width=700,height=600,resizable=yes,toolbar=yes,status=no,scrollbars=yes,menubar=yes,directories=no,location=no,dependant=no', false, false);" title="Help for this Page (New Window)"><span class="helpLink">Help for this Page</span><img src="/s.gif" alt="" class="helpImage" title=""></a>
							</div>
						</div>
						<div class="ptBreadcrumb">&nbsp;&nbsp;<a href="/{!HTMLENCODE(BGBK__Bill__c.Id)}{!HTMLENCODE(MUSW__Permit__c.Id)}{!HTMLENCODE(MUSW__Complaint__c.Id)}{!HTMLENCODE(MUSW__Planning_Application__c.Id)}{!HTMLENCODE(MUSW__License1__c.Id)}{!HTMLENCODE(MUSW__Permit2__c.Id)}{!HTMLENCODE(MUSW__Complaint2__c.Id)}{!HTMLENCODE(MUSW__Application2__c.Id)}{!HTMLENCODE(MUSW__License2__c.Id)}" target="_top">Back to {!HTMLENCODE(BGBK__Bill__c.Name)}{!HTMLENCODE(MUSW__Permit__c.Name)}{!HTMLENCODE(MUSW__Complaint__c.Name)}{!HTMLENCODE(MUSW__Planning_Application__c.Name)}{!HTMLENCODE(MUSW__License1__c.Name)}{!HTMLENCODE(MUSW__Permit2__c.Name)}{!HTMLENCODE(MUSW__Complaint2__c.Name)}{!HTMLENCODE(MUSW__Application2__c.Name)}{!HTMLENCODE(MUSW__License2__c.Name)}</a></div>
						<br/>
						<div id="messages" style="color: red"></div>
					</div>
					<!-- CONTROL SECTIONS -->
					<div class="filterOverview">
						<form action="/a00" id="filter_element" method="GET" name="filter_element" onsubmit="if (window.ffInAlert) { return false; }">
							<div class="bFilterView">
								<span class="bFilter">
									<span class="fBody" align = center>
										<TABLE bgcolor:#EEEEEE  class="detailList" cellpadding="1" cellspacing="1" border="0"  >
											<TR>
												<td colspan="2"><h2 class="pageDescription">Create New Payment:</h2></td>
											</TR>
											<TR>
												<TD style = "padding:2px 10px 2px 2px; text-align:right; font-size: 8pt; font-weight: bold; color:#333;">Tendered Amount</TD>
												<span>
												<TD>
													<input  tabindex="1" maxlength="50" type="text" id="tenderedAmount" size="20" name="tenderedAmount" onblur="javascript:blurTenderedAmount(this)">
												</TD>
												</span>
												
												<TD style = "padding:2px 10px 2px 2px; text-align:right; font-size: 8pt; font-weight: bold; color:#333;">Receipt Number</TD>
												<TD colspan="3"><nobr>
													<input  tabindex="2" maxlength="50" type="text" id="receiptNumber" size="20" name="receiptNumber"></nobr>
													[&nbsp;<a href="javascript:openPopupFocus('{!URLFOR($SControl.MUSW__SequenceNumberUpdate)}&Id=0&object=MUSW__Receipt__c&type=DEFAULT&trackField=MUSW__Track_No__c&field=receiptNumber', '_blank', 270, 190, 'width=270,height=170,resizable=yes,toolbar=no,status=no,scrollbars=no,menubar=no,directories=no,location=no,dependant=yes', true, true);" class="datePicker" tabindex="3" title="Track Number (New Window)" onclick="setLastMousePosition(event)" id="popTrackNo">Issue Number</a>&nbsp;]
												</TD>
												
											</TR>
											<TR>
												<TD style = "padding:2px 10px 2px 2px; text-align:right; font-size: 8pt; font-weight: bold; color:#333;">Payment Method</TD>
												<TD>
												<span>
													<select  tabindex="3" id="paymentMethod" name="paymentMethod" selectIndex="1">
													</select>
												</span>
												</TD>
												<TD style = "padding:2px 10px 2px 2px; text-align:right; font-size: 8pt; font-weight: bold; color:#333;">Check Number</TD>
												<TD>
													<input  tabindex="4" maxlength="25" type="text" id="checkNumber" size="20" name="checkNumber">
												</TD>
											</TR>
											<TR>
												<TD style = "padding:2px 10px 2px 2px; text-align:right; font-size: 8pt; font-weight: bold; color:#333;">Paid By</TD>
												<TD><input type="hidden" name="feePaidBy_lkid" id="feePaidBy_lkid" value="000000000000000">
													<input type="hidden" name="feePaidBy_lkold" id="feePaidBy_lkold" value="null">
													<input type="hidden" name="feePaidBy_lktp" id="feePaidBy_lktp" value="003">
													<input type="hidden" name="feePaidBy_lspf" id="feePaidBy_lspf" value="0">
													<input type="hidden" name="feePaidBy_mod" id="feePaidBy_mod" value="0">
													<span style = "padding:2px 10px 2px 0px; text-align:left; font-size: 8pt; color:#333;">
														<input tabindex="5" maxlength="80" type="text" readonly="true" onchange="document.getElementById('feePaidBy_lkid').value='';document.getElementById('feePaidBy_mod').value='1';" id="feePaidBy" size="20" name="feePaidBy">
														<a href="JavaScript: openLookup('/_ui/common/data/LookupPage?lknm=feePaidBy&lkfm=filter_element&lktp=' + document.getElementById('feePaidBy_lktp').value,670,document.getElementById('feePaidBy_mod').value,'&lksrch=' + escapeUTF(document.getElementById('feePaidBy').value),'maxw')" tabindex="6" title="Fee Paid By Lookup (New Window)" onclick="setLastMousePosition(event)" id="feePaidBy_lkwgt">
															<img src="/s.gif" alt="Fee Paid By Lookup (New Window)"  class="lookupPopup">
														</a>
													</span>
												</TD>
												<TD style = "padding:2px 10px 2px 2px; text-align:right; font-size: 8pt; font-weight: bold; color:#333;">Comments</TD>
												<TD>
													<textarea  tabindex="6" maxlength="255" id="paymentComment" rows="2" cols="20" name="paymentComment"></textarea>
												</TD>
											</TR>
											<tr>
												<td colspan="2">
													<h2 class="pageDescription">OR Use Available Payments:</h2>
													
												</td>
											</tr>
											<tr>
												<TD style = "padding:2px 10px 2px 2px; text-align:right; font-size: 8pt; font-weight: bold; color:#333;">Payment</TD>
												<TD>
												<!--<span>
													<select  tabindex="7" id="availablePayment" name="availablePayment" onChange="SelectPayment(this)">
													</select>
												</span>-->
												<span>
													<select  tabindex="7" id="availablePayment" name="availablePayment" onChange="SelectPayment(this)">
													</select>
												</span>
												</TD>
												<TD style = "padding:2px 10px 2px 2px; text-align:right; font-size: 8pt; font-weight: bold; color:#333;">Payment Amount</TD>
												<span>
												<TD>
													<input  tabindex="8" maxlength="50" type="text" id="paymentAmount" size="20" name="paymentAmount" onblur="blurPaymentAmount(this)">
												</TD>
												</span>
												<TD style = "padding:2px 10px 2px 2px; text-align:right; font-size: 8pt; font-weight: bold; color:#333;">Paid Date</TD>
												<TD><nobr><input type="text" id="paidDate" size="20" name="paidDate" value="{!Today}"/><a href="javascript:openPopupFocus('/home/calendar.jsp?form=filter_element&field=paidDate&mo=0', '_blank', 186, 170, 'width=186,height=170,resizable=yes,toolbar=no,status=no,scrollbars=no,menubar=no,directories=no,location=no,dependant=yes', true, true);" class="datePicker" tabindex="3" title="Pick A Date (New Window)" onclick="setLastMousePosition(event)" id="PopCal"><img src="/s.gif" alt="Pick A Date (New Window)" class="datePickerIcon"></a><span class="dateFormat">[&nbsp;<a id="paidDateDefault" href="#" onclick="var inputField = getElementByIdCS('paidDate'); if (inputField && inputField.disabled == false) { inputField.value = '{!Today}'; if (inputField.onchange) {inputField.onchange();}}return false;">{!Today}</a> &nbsp;]</span></nobr></TD>
											</tr>
										</TABLE>										
									</span>
									<span class="fFooter">
									</span>
								</span>
							</div>
						</form>
					</div>
					<!-- Begin RelatedListElement -->
					<div class="bRelatedList">
						<div class="bNext">
							<div class="withFilter">
								<div class="clearingBox"></div>
							</div>
						</div>
						<!-- WrappingClass -->
						<div class="hotListElement">
							<div class="bPageBlock secondaryPalette">
								<div class="pbHeader">
									<form action="/a00/o" id="hotlist" method="GET" name="hotlist" onsubmit="if (window.ffInAlert) { return false; }">
										<table border="0" cellpadding="0" cellspacing="0">
											<tr>
												<td width="22%" class="pbTitle">
													<img src="/s.gif" alt="" width="1" height="1" class="minWidth" title="" />
													<h3>Unpaid & Uninvoiced Fees for: {!HTMLENCODE(BGBK__Bill__c.Name)}{!HTMLENCODE(MUSW__Permit__c.Name)}{!HTMLENCODE(MUSW__Complaint__c.Name)}{!HTMLENCODE(MUSW__Planning_Application__c.Name)}{!HTMLENCODE(MUSW__License1__c.Name)}{!HTMLENCODE(MUSW__Permit2__c.Name)}{!HTMLENCODE(MUSW__Complaint2__c.Name)}{!HTMLENCODE(MUSW__Application2__c.Name)}{!HTMLENCODE(MUSW__License2__c.Name)}</h3>
												</td>
												<td align="left" width="20%" class="pbButton">											
													<INPUT class="btn" id="update" onclick="javascript:this.disabled=true;makePayment(document.forms['records'],'ids',this.checked,false)" type="button" value="Update" name="update">&nbsp;
													<INPUT class="btn" id="updatePrint" onclick="javascript:this.disabled=true;makePayment(document.forms['records'],'ids',this.checked,true)" type="button" value="Update & Print Receipt" name="updatePrint">&nbsp;
													<INPUT class="btn" id="cancel" onclick="javascript: cancelUpdate()" type="button" value="Cancel" name="cancel">
												</td>
												
												<td width="20%" align="left" ><h3>Owing: <span id = "amountTotal" name = "amountTotal"></span></h3></td>
												<td width="20%" align="left" ><h3>Paying: <span id = "paidTotal" name = "paidTotal"></span></h3></td>
												<td width="17%" align="left" ><h3>Remaining: <span id = "unallocatedTotal" name = "unallocatedTotal"></span></h3></td>
											</tr>
										</table>
									</form>
								</div>
								<div class="pbBody">
									<form id = "records">
									<table id = "contentTable" class="list" border="0" cellspacing="0" cellpadding="0">
										<tr class="headerRow">
											<th scope="col" class=""><input id="" tabindex="9" onclick="javascript:SelectChecked(document.forms['records'],'ids',this.checked);setFeesPaid(this.checked);" type="checkbox" value="" name=""></th>
											<th scope="col" class="">Fee Type</th>
											<th scope="col" class="">Related To</th>
											<th scope="col" class="">Created By</th>
											<th scope="col" class="">Created On</th>
											<th scope="col" class="">Amount Outstanding</th>
											<div id="allocatedHeader" style="display: none">
											<th scope="col" class="">Amount Paid</th>
											</div>
										</tr>
									</table>
									</form>	
								</div>
								<div class="pbFooter secondaryPalette">
									<div class="bg"></div>
								</div>
							</div>
						</div>
						<div class="listElementBottomNav"></div>
					</div>
				</td>
			</tr>
		</table>
		<DIV id="divDebugHeader" style="display: none">
			<hr/>
			<b>Debug Mode</b>
		</DIV>
		<DIV id="divDebug" style="display: none"></DIV>
	</body>
</html>