<apex:page sidebar="false" standardStylesheets="false" controller="MUSW.GISAppController" action="{!init}" showHeader="false" applyHtmlTag="false" title="BasicGov Maps" docType="html-5.0">
<apex:pageMessages id="msg"/>
<apex:includeScript value="{!widgetsResourceUrl}/"/>

<!-- 
    ***************
    THIS PAGE IS DEPRECATED
    USE GISMapViewer for all future development
    ***************
 -->
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
        <title>BasicGov GIS Map Viewer</title>
        <link rel="shortcut icon" href="{!webAppResourceUrl}/images/shortcut.png"/>
        <style type="text/css">
            body,html {
              width:100%;
              height:100%;
              margin:0;
              padding:0;
              overflow:hidden;
              font-family: 'Open Sans', Helvetica, Arial;
            }
            #main-loading{
                width: 100%;
                height: 100%;
                background-color: #344357;
                text-align: center;
                overflow: hidden;

            }
            #main-loading .app-name{
                font: 36px arial;
                font-weight: bold;
                position: absolute;
                left: 50%;
                top: 50%;
                margin-left: -204px;
                margin-top: -135px;
                z-index: 2;
            }
            #main-loading img{
                position: relative;
                top: 34%;
                height: 275px;
                display: block;
                margin: auto;
            }
            #main-loading .loading-info{
                font: 14px 'arial';
                margin-top: 50px;
                overflow: hidden;
                position: relative;
                top: 34%;
            }
            #main-loading .loading-info .loading{
                width: 260px;
                height: 4px;
                border-radius: 2px;
                background-color: #192330;
                margin: auto;
            }
            #main-loading .loading-info .loading-progress{
                height: 4px;
                border-radius: 2px;
                background-color: white;
            }

            #main-page{
                display: none;
                width: 100%;
                height: 100%;
                position: relative;
            }

            #jimu-layout-manager{
                width: 100%;
                height: 100%;
                position: absolute;
            }
        </style>
        
        <script>
            
            /*******************************
            * This is the function you can modify to customize the loading page
            * This function will be invoked when one resource is loaded.
            ********************************/
            var progress;
            function loadingCallback(url, i, count) {
                var loading = document.getElementById('main-loading-bar');
                loading.setAttribute('title', url);
              if(!progress){
                progress = document.createElement('div');
                progress.setAttribute('class', 'loading-progress');
                loading.appendChild(progress);
              }
              progress.style.width = (((i - 1)/count) * 100) + '%';
            }
        </script>
    </head>
    
    <body class="claro">
        <div id="main-loading">
            <div class="app-name">
                <span style="color:white">ArcGIS Web Application</span>
            </div>
            <img src="{!webAppResourceUrl}/images/loading.gif"/>
            <div class="loading-info">
                <div id="main-loading-bar" class="loading"></div>
            </div>
        </div>
        <div id="main-page">
            <div id="jimu-layout-manager"></div>
        </div>
        <script>
            // have to declare these variables in visualforce page so they are available to static resource
            var realPath = "{!webAppResourceUrl}/";
            var widgetsPath = "{!widgetsResourceUrl}/";
        </script>
        <script src="{!webAppResourceUrl}/env.js"></script>
        <script src="{!webAppResourceUrl}/simpleLoader.js"></script>
        <script src="{!webAppResourceUrl}/init.js"></script> 
        <script>
            Visualforce.remoting.timeout = 120000;
            var currentUserId = '{!$User.Id}';
            var returnUrl = '{!JSENCODE(returnUrl)}';
            var routingServiceAvailable = '{!routingServiceAvailable}';
            
            //set parameter for auto zoom
            var defaultZoomLevel = "{!JSENCODE($CurrentPage.parameters.defaultZoom)}";
            if (defaultZoomLevel == "null" || defaultZoomLevel == "") defaultZoomLevel = 18;
            else defaultZoomLevel = parseInt(defaultZoomLevel);
            
            var defaultScaleLevel = "{!JSENCODE($CurrentPage.parameters.defaultScale)}";
            defaultScaleLevel = parseFloat(defaultScaleLevel);
            
            var zoomOnLoad = '{!zoomOnLoad}';
            var zoomParcelName = '';
            var zoomLayerName = '';
            var zoomObjects = [];
            if(zoomOnLoad == 'true')
            {
                zoomParcelName = '{!zoomParcelName}';
                zoomLayerName = '{!zoomLayerName}';
                if(zoomParcelName == '')
                {                    
                    var zoomObject = '{!zoomObjectVO}';
                    zoomObjects.push(zoomLayerName+'_bgDefaultObjectToZoom');
                    
                    if(zoomObject)      
                    {       
                        zoomObjects.push(JSON.parse(zoomObject));       
                    }
                }
            }
                
            var showDirections = '{!showDirections}';
            var fieldsetName = '';
            var recordIds = '';
            if(showDirections == 'true')
            {
                fieldsetName = '{!fieldsetName}';
                recordIds = '{!recordIds}';
            }

            // Is user in lightning experience or not?
            var userTheme = '{!$User.UIThemeDisplayed}';
            var isLightning = userTheme.includes('Theme4'); // Theme4d is Lightning Experience, Theme4t is SF1 mobile theme

            //This map is use to prevent we subscribe the same topic for the same function multiple times
            var dojoSubscribersMap = {};
            function BGManager (){
                this.Deferred;
                require(['dojo/Deferred'], function(Deferred){
                    this.Deferred = Deferred;
                });
                this.getListViewsLayerList = function (objNames){

                    getAndCacheListViewInfos(objNames).then(
                        function(result){
                            dojo.publish('listViews_layerList', [result]);  
                        },
                        function(error){
                            if (error.type === 'exception') {
                                if (event.tid > 5) {
                                    dojo.publish('listViews_layerList', 'Exception:' + event.message + ' Please contact your administrator.');
                                } else {
                                    var self = new BGManager();
                                    self.getListViewsLayerList(objNames);
                                }
                            }
                        }
                    ) 
                };
                this.getAllUsersLayerList = function (){ 
                    MUSW.GISAppController.getAllUsers(function(result, event){
                        if(event.status){
                            dojo.publish('allUsers_layerList', [result]);                        
                        } else if (event.type === 'exception') {
                            var self = new BGManager();
                            self.getAllUsersLayerList();
                        }
                    });  
                };
                this.assignToUserLayerList = function (objId, userId){ 
                    MUSW.GISAppController.assignToUser(objId, userId,function(result, event){
                        if(event.status){
                            dojo.publish('assignToUser_layerList', 'Succeed');                        
                        } else if (event.type === 'exception') {
                            dojo.publish('assignToUser_layerList', event.message);  
                        }
                    });  
                };
                this.getListViewsSearch = function (objNames){
                    getAndCacheListViewInfos(objNames).then(
                        function(result) {
                            dojo.publish('listViews_search', [result]);    
                        },
                        function(error) {
                            if (error.type === 'exception') {
                                if (error.tid > 5) {
                                    dojo.publish('listViews_search', 'Exception:' + event.message + ' Please contact your administrator.');
                                } else {
                                    var self = new BGManager();
                                    self.getListViewsSearch(objNames);
                                }
                            }
                        }
                    );
                };
                this.getAllUsersSearch = function (){ 
                    MUSW.GISAppController.getAllUsers(function(result, event){
                        if(event.status){
                            dojo.publish('allUsers_search', [result]);                        
                        } else if (event.type === 'exception') {
                            var self = new BGManager();
                            self.getAllUsersSearch();
                        }
                    });  
                };
                this.assignToUserSearch = function (objId, userId){ 
                    MUSW.GISAppController.assignToUser(objId, userId,function(result, event){
                        if(event.status){
                            dojo.publish('assignToUser_search', 'Succeed');                        
                        } else if (event.type === 'exception') {
                            dojo.publish('assignToUser_search', event.message);  
                        }
                    });  
                };
                this.getListViewResults = function (objName, lvLabel){
                    
                    var dojoListenerName = 'listViewResults_'+objName+'_'+lvLabel;
                    var graphicalLayerId = objName+'_'+lvLabel;
                    var listViewId = getListViewId(objName, lvLabel);
                    getListViewDescribe(objName, listViewId).then(
                        function(listViewDescribeResult) {
                            callGetListViewResults(objName, listViewDescribeResult).then(
                                function(queryResult) {
                                    queryResult.unshift(graphicalLayerId); // prepend graphical layer id 
                                    dojo.publish(dojoListenerName, [queryResult]);
                                },
                                function(error) {
                                    if (error.type === 'exception') {
                                        if (error.message.indexOf('IO Exception') != -1 || error.message.indexOf('timeout') != -1) {
                                            var self = new BGManager();
                                            self.getListViewResults(objName, lvLabel);
                                        } else {
                                            fireExceptionMessage(dojoListenerName, error.message);
                                        }
                                    }
                                }
                            );
                        }, 
                        // error callback of getListViewDescribe
                        function(error) {
                            fireExceptionMessage(dojoListenerName, error.message);
                        }
                    );
                };
                this.getDirectionRecordResults = function (){
                    MUSW.GISAppController.queryDirectionRecords(fieldsetName, recordIds, function(result, event){
                        if(event.status){
                            var fields = result.fields;
                            var res = result.sobjects;
                            res.unshift(fields);
                            //Use as Id to create graphic layer 
                            res.unshift('directionRecordResults');
                            dojo.publish('directionRecordResults', [res]);
                        } if (event.type === 'exception') {
                            if(event.message.indexOf('IO Exception') != -1 || event.message.indexOf('timeout') != -1)
                            {
                                var self = new BGManager();
                                self.getDirectionRecordResults();
                            } else
                            {
                                dojo.publish('directionRecordResults', 'Exception:' + event.message);
                            }
                        }
                    });
                };
                this.getSearchResultsText = function (text, objName, lvLabel){

                    var graphicalLayerId = objName+'_'+lvLabel+'_bgSearchText';
                    var dojoListenerName = 'searchResultsText_'+objName+'_'+lvLabel;
                    var listViewId = getListViewId(objName, lvLabel);
                    getListViewDescribe(objName, listViewId).then(
                        function(listViewDescribeResult) {
                            callSearchByText(text, objName, listViewDescribeResult).then(
                                function(queryResult) {
                                    queryResult.unshift(graphicalLayerId);
                                    dojo.publish(dojoListenerName, [queryResult]);
                                },
                                function(error) {
                                    if (error.type === 'exception') {
                                        if (error.message.indexOf('IO Exception') != -1 || error.message.indexOf('timeout') != -1) {
                                            var self = new BGManager();
                                            self.getSearchResultsText(text, objName, lvLabel);
                                        } else {
                                            fireExceptionMessage(dojoListenerName, error.message);
                                        }
                                    }
                                }
                            );
                        },
                        function(error) {
                            fireExceptionMessage(dojoListenerName, error.message);
                        }
                    );
                };
                
                this.getSearchResultsWhereClause = function (whereClause, objName, lvLabel){
                    var graphicalLayerId = objName+'_'+lvLabel+'_bgSearchWhere';
                    var dojoListenerName = 'searchResultsWhere_'+objName+'_'+lvLabel;
                    var listViewId = getListViewId(objName, lvLabel);
                    getListViewDescribe(objName, listViewId).then(
                        function(listViewDescribeResult){
                            callSearchByWhereClause(whereClause, objName, listViewDescribeResult).then(
                                function(queryResult){
                                    queryResult.unshift(graphicalLayerId); // prepend graphical layer id 
                                    dojo.publish(dojoListenerName, [queryResult]);
                                },
                                function(error) {
                                    if (error.type === 'exception') {
                                        if (error.message.indexOf('IO Exception') != -1 || error.message.indexOf('timeout') != -1) {
                                            var self = new BGManager();
                                            self.getSearchResultsWhereClause(whereClause, objName, lvLabel);
                                        } else {
                                            fireExceptionMessage(dojoListenerName, error.message);
                                        }
                                    }
                                }
                            );
                        },
                        function(error){
                            fireExceptionMessage(dojoListenerName, error.message);
                        }
                    );                 
                };

                this.getBGLinks= function (params){
                    MUSW.GISAppController.getActionLinks(params, function(result, event){
                        var lvLabel = params.lvLabel;
                        var objName = params.objName;
                        if(event.status){
                            //Use as Id to create graphic layer
                            result = [result];
                            result.unshift(objName+'_'+lvLabel+'_bgLinks');
                            console.debug('*** Return Results');
                            console.dir(result);
                            dojo.publish('bgLinkResults_'+lvLabel+'_'+objName, [result]);
                        } if (event.type === 'exception') {
                            if(event.message.indexOf('IO Exception') != -1 || event.message.indexOf('timeout') != -1)
                            {
                                var self = new BGManager();
                                self.getBGLinks(params);
                            } else
                            {
                                dojo.publish('bgLinkResults_'+lvLabel+'_'+objName, 'Exception:' + event.message);
                            }
                        }
                    });
                };

                this.getBGCreateRecordLink= function (param){
                    MUSW.GISAppController.getCreateRecordLink(param, function(result, event){
                        var objName = param.objName;
                        if(event.status){
                            //Use as Id to create graphic layer
                            result = [result];
                            result.unshift(objName+'_bgCreateRecordLink');
                            console.debug('*** Return Results');
                            console.dir(result);
                            dojo.publish('bgCreateRecordLinkResults_'+objName, [result]);
                        } if (event.type === 'exception') {
                            if(event.message.indexOf('IO Exception') != -1 || event.message.indexOf('timeout') != -1)
                            {
                                var self = new BGManager();
                                self.getBGCreateRecordLink(params);
                            } else
                            {
                                dojo.publish('bgCreateRecordLinkResults_'+objName, 'Exception:' + event.message);
                            }
                        }
                    });
                };
                
                this.getAllResultsFromSearch = function (objName, lvLabel){
                    var listViewId = getListViewId(objName, lvLabel);
                    var graphicalLayerId = objName+'_'+lvLabel+'_bgSearch';
                    var dojoListenerName = 'allBGRecords_'+objName+'_'+lvLabel;
                    getListViewDescribe(objName, listViewId).then(
                        function(listViewDescribeResult){
                            callGetListViewResults(objName, listViewDescribeResult).then(
                                function(queryResult){
                                    queryResult.unshift(graphicalLayerId);
                                    dojo.publish(dojoListenerName, [queryResult]);
                                },
                                // error callback for callGetListViewResults
                                function(error){
                                    if (error.type === 'exception') {
                                        if (error.message.indexOf('IO Exception') != -1 || error.message.indexOf('timeout') != -1) {
                                            var self = new BGManager();
                                            self.getAllResultsFromSearch(objName, lvLabel);
                                        } else {
                                            fireExceptionMessage(dojoListenerName, error.message);
                                        }
                                    }
                                }
                            );
                        },
                        // error callback for getListViewDescribe
                        function(error){
                            fireExceptionMessage(dojoListenerName, error.message);
                        }
                    );
                };
                                            
                this.getAllResultsLayerList = function (objName, lvLabel){
                    var dojoListenerName = 'bufferSearchResults_layerList'+objName+'_'+lvLabel;
                    var graphicalLayerId = objName+'_'+lvLabel+'_bgBufferSearchLayerList';
                    var listViewId = getListViewId(objName, lvLabel);
                    getListViewDescribe(objName, listViewId).then(
                        function(listViewDescribeResult){
                            callGetListViewResults(objName, listViewDescribeResult).then(
                                function(queryResult){
                                    queryResult.unshift(graphicalLayerId);
                                    dojo.publish(dojoListenerName, [queryResult]);
                                },
                                function(error){
                                    if (error.type === 'exception') {
                                        if (error.message.indexOf('IO Exception') != -1 || error.message.indexOf('timeout') != -1) {
                                            var self = new BGManager();
                                            self.getAllResultsLayerList();
                                        } else {
                                            fireExceptionMessage(dojoListenerName, error.message);
                                        }
                                    }
                                }
                            )
                        },
                        function(error){
                            fireExceptionMessage(dojoListenerName, error.message);
                        }
                    );
                }; 
                
                this.getToken = function (){
                   MUSW.GISAppController.getToken( function(result, event){
                         if(event.status){
                             dojo.publish('bgSecurityToken', [result]);
                         } if(event.type === 'exception') {
                            //TO Do here to handle exception
                            if(event.tid > 5)
                            {
                                dojo.publish('bgSecurityToken', 'Exception:' + event.message + ' Please contact your administrator.');
                            }
                            else
                            {
                                var self = new BGManager();
                                self.getToken();
                            }
                         }
                    });
               }; 

                this.getGeoFieldNames = function(objTypes){
                    MUSW.GISAppController.getGeoFieldNames(objTypes, function(result, event){
                        if(event.status){
                            var res = [result];
                            dojo.publish('editWidgetGetGeoFieldNames', [res]);
                        } if (event.type === 'exception') {
                                if(event.message.indexOf('IO Exception') != -1 || event.message.indexOf('timeout') != -1)
                                {
                                    var self = new BGManager();
                                    self.getGeoFieldNames(objTypes);
                                } else
                                {
                                    dojo.publish('editWidgetGetGeoFieldNames', 'Exception:' + event.message);
                                }
                            }
                    });
               };
            }
            
            /**Does callout or cache retrieval to get all list views for objNames
            * @return Deferred.promise
            **/
            function getAndCacheListViewInfos(objNames) {
                var deferred = new Deferred();
                MUSW.GISAppController.getListViews(objNames, function(result, event){
                    if (event.status) {
                        cacheListViewInfoResult(result);
                        deferred.resolve(result);
                    } else {
                        deferred.reject(event);
                    }
                });
                return deferred.promise;
            }
            /**Does callout or cache retrival to get list view describe metadata for provided listviewId
            * @return Deferred.promise
            **/
            function getListViewDescribe(objName, listViewId) {
                var deferred = new Deferred();
                var cachedListView = getCachedListViewDescribe(listViewId);
                if (cachedListView) {
                    deferred.resolve(cachedListView);
                } else {
                    MUSW.GISAppController.getListViewDescribe(objName, listViewId, function(result, event){
                        if (event.status) {
                            cacheListViewDescribe(listViewId, result);
                            deferred.resolve(result);
                        } else {
                            deferred.reject(event);
                        }
                    });
                }
                return deferred.promise;
            }
            
            /**Does callout to query for records on specified list view
            * @return Deferred.promise
            **/
            function callGetListViewResults(objName, listViewDescribe) {
                var deferred = new Deferred();
                MUSW.GISAppController.getListViewResults(objName, listViewDescribe, function(result, event) {
                    if (event.status) {
                        var fields = result.fields;
                        var objects = result.sobjects;
                        objects.unshift(fields); // prepend field info onto objects array
                        deferred.resolve(objects);
                    } else {
                        deferred.reject(event);
                    }
                });
                return deferred.promise;
            }
            function fireExceptionMessage(eventName, message) {
                dojo.publish(eventName, 'Exception:' + message);
            }
            /**Does callout to query for records on specified list view, filtered with user's where clause.
            * @return Deferred.promise
            **/
            function callSearchByWhereClause(userWhereClause, objName, listViewDescribe) {
                var deferred = new Deferred();
                // Apex Method Params (String whereClause, String objName, String[] lvFields, String lvFilter)
                MUSW.GISAppController.searchByWhereClause(userWhereClause, objName, listViewDescribe, function(result, event) {
                    if (event.status) {
                        var fields = result.fields;
                        var res = result.sobjects;
                        res.unshift(fields);
                        deferred.resolve(res);
                    } else {
                        deferred.reject(event);
                    }
                });
                return deferred.promise;
            }
            /**Does callout to query for records on specified list view, filtered with user's search term
            * @return Deferred.promise
            **/
            function callSearchByText(userText, objName, listViewDescribe) {
                var deferred = new Deferred();
                // Apex method params (String txt, String objName, String[] lvFields, String lvFilter)
                MUSW.GISAppController.searchText(userText, objName, listViewDescribe, function(result, event) {
                    if (event.status) {
                        var fields = result.fields;
                        var res = result.sobjects;
                        res.unshift(fields);
                        deferred.resolve(res);
                    } else {
                        deferred.reject(event);
                    }
                });
                return deferred.promise;
            }
            
            /** Caching and retrieval of listviews **/
            var objectListViewInfos = {}; // map of object name to ListViewInfo list
            var listViewDescribesById = {}; // map of lisview id to ListViewDescribe object
            
            function cacheListViewInfoResult(lvos) {
                if (lvos) {
                    lvos.forEach(function(objLVO){
                        if (objectListViewInfos[objLVO.objectName]) {
                            // skip
                        } else {
                            objectListViewInfos[objLVO.objectName] = objLVO.listViewInfos;
                        }
                    });
                }
            }

            function getListViewId(objectName, listViewLabel) {
                var listViewInfos = objectListViewInfos[objectName];
                var listViewId;
                if (listViewInfos) {
                    var info = listViewInfos.find(function(lv){
                        return lv.label === listViewLabel;
                    });
                    listViewId = info.id;
                }
                return listViewId;
            }

            function cacheListViewDescribe(listViewId, describe) {

                listViewDescribesById[listViewId] = describe;
            }

            function getCachedListViewDescribe(listViewId) {
                return listViewDescribesById[listViewId];
            }
            /*This is the code for test.
            var objectNames = ['MUSW__Parcel__c','MUSW__Permit2__c'];

            function getObjectListView(objNames){
                MUSW.GISAppController.getListViews(objNames, function(result, event){
                    if(event.status){
                        console.debug('*** ListViews');
                        console.dir(result);
                    }
                });
            }
            var listViewMap = getObjectListView(objectNames);
            function getObjectListViewResults(objName,lvLabel){
                MUSW.GISAppController.getListViewResults(objName, lvLabel, function(result, event){
                    if(event.status){
                        console.debug('*** Parcel results');
                        console.dir(result);
                    }
                });
            }
            var listViewResult = getObjectListViewResults('MUSW__Parcel__c', 'TestParcel1');
            function getSearchResults(jsonStr, searchType, objName,lvLabel){
                MUSW.GISAppController.searchGraphic(jsonStr, searchType, objName, lvLabel, function(result, event){
                    if(event.status){
                        console.debug('*** Search results');
                        console.dir(result);
                    }
                });
            }
            var onePoint = [[90,60]];
            var searchResult = getSearchResults(onePoint, 'Point','MUSW__Parcel__c', 'TestParcel1');*/
        </script>

    <!-- Start of Lightning Experience Record type picker, and functionality needed for LEX users to created records from map viewer -->
    <apex:outputPanel layout="block" rendered="{!contains($User.UIThemeDisplayed, 'Theme4')}">
        <apex:slds />
            <div class="slds-scope">
                <div class="slds-modal" id="rt-modal" aria-labelledby="rt-heading" role="dialog">
                    <div class="slds-modal__container">
                        <div class="slds-modal__header">
                            <h3 id="rt-heading">
                                Select a record type
                            </h3>
                        </div>
                        <div class="slds-modal__content slds-p-around--medium">
                            <form id="rt-form">
                                <!-- insert point for radio buttons -->
                            </form>
                        </div>
                        <div class="slds-modal__footer">
                            <button onclick="cancelModal();" class="slds-button--neutral slds-button">
                                Cancel
                            </button>
                            <button onclick="create();" class="slds-button--brand slds-button">
                                Continue
                            </button>
                        </div>
                     </div>
                    
                </div>
            <div class="slds-backdrop" id="rt-modal-backdrop">
                
            </div>
            </div>
            
        </apex:outputPanel>
    
    <script>
    
           
    // Lightning Create Record and Record Type picker functions. Only used when user is in Lightning experience
        var ltngActionObjName;
        var ltngActionDefaults;
        
    // Calls a function in GISAppController to get the list of record types. Shows record type picker if > 1 record type available
        function getRecordTypes(params) {
            ltngActionObjName = params.objectType;
            ltngActionDefaults = params.defaultValues;
            MUSW.GISAppController.getRecordTypes(ltngActionObjName, function(result, event){
                if (event.status) {
                    var keys = Object.keys(result);
                    if (keys.length == 0) {
                        sforce.one.createRecord(ltngActionObjName, null, ltngActionDefaults);
                    } else if (keys.length == 1) {
                        // don't need record type picker, as there's only 1 rt available
                        sforce.one.createRecord(ltngActionObjName, result[keys[0]], ltngActionDefaults);
                    } else {
                        showModal(keys, result);
                    }
                } if (event.type === 'exception') {
                    if(event.message.indexOf('IO Exception') != -1 || event.message.indexOf('timeout') != -1)
                    {
                        getRecordTypes(params);
                    } else
                    {
                        dojo.publish('errorFromGetRecordTypes', 'Exception:' + event.message); 
                    }
                }
            });
        }

        var modal = document.getElementById("rt-modal");
        var backdrop = document.getElementById("rt-modal-backdrop");
        var showModalClass = "slds-fade-in-open";
        var showBackdropClass = "slds-backdrop--open";
    
        function cancelModal(){
            document.getElementById("rt-form").innerHTML = ""; // clear form
            modal.classList.remove(showModalClass);
            backdrop.classList.remove(showBackdropClass);
        }
        
        function showModal(keys, recordTypes){
            var form = document.getElementById("rt-form");
            var c = document.createDocumentFragment();
            for (var i=0; i<keys.length; i++) {
                var div = document.createElement('div');
                div.classList.add('slds-form-element__control');
                
                var wrapperSpan = document.createElement('span');
                wrapperSpan.classList.add('slds-radio');
                
                var input = document.createElement('input');
                input.setAttribute('type', 'radio');
                input.setAttribute('name', 'rt-picker');
                input.setAttribute('value', recordTypes[keys[i]]);
                input.setAttribute('id',  recordTypes[keys[i]]);
                
                var label = document.createElement('label');
                label.setAttribute('for', recordTypes[keys[i]]);
                label.classList.add('slds-radio__label');
                
                var fauxButton = document.createElement('span');
                fauxButton.classList.add('slds-radio_faux');
                
                var labelText = document.createElement('span');
                labelText.classList.add('slds-form-element__label');
                labelText.innerHTML = keys[i];
                
                label.appendChild(fauxButton);
                label.appendChild(labelText);
                
                wrapperSpan.appendChild(input);
                wrapperSpan.appendChild(label);
                
                div.appendChild(wrapperSpan);
                
                c.appendChild(div);
            }
            
            form.appendChild(c);
            
            // now show modal
            modal.classList.add(showModalClass);
            backdrop.classList.add(showBackdropClass);
        }
        
        function create() {
            var inputs = document.querySelectorAll('input[name=rt-picker]');
            var selectedId;
            for (var i=0;i<inputs.length;i++) {
                if(inputs[i].checked) {
                    selectedId = inputs[i].value;
                    break;
                }
            }
            
            sforce.one.createRecord(ltngActionObjName,selectedId,ltngActionDefaults);
            cancelModal();
        }
    </script>
    </body>
</html>
</apex:page>